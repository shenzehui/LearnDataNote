<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>IT达摩院</title>
    <link>https://newzone.top/</link>
    <description>一位来自计算机在校大学生的个人技术博客，其中涵盖了Java基础、Java并发编程、Java虚拟机、精选面试题、数据结构和算法、计算机网络、Spring、SpringCloud等内容，✨初衷是希望能够和大家一起交流和分享所学到的技术</description>
    <language>zh-CN</language>
    <pubDate>Thu, 30 Mar 2023 09:57:43 GMT</pubDate>
    <lastBuildDate>Thu, 30 Mar 2023 09:57:43 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>好文收集</category>
    <category>算法指南</category>
    <item>
      <title>写出漂亮代码的45个小技巧</title>
      <link>https://newzone.top/nicearticle/art04.html</link>
      <guid>https://newzone.top/nicearticle/art04.html</guid>
      <source url="https://newzone.top/rss.xml">写出漂亮代码的45个小技巧</source>
      <category>好文收集</category>
      <pubDate>Thu, 01 Dec 2022 12:20:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>不知道大家有没有经历过维护一个已经离职的人的代码的痛苦，一个方法写老长，还有很多的if else ，根本无法阅读，更不知道代码背后的含义，最重要的是没有人可以问，此时只能心里默默地问候这个留坑的兄弟。</p>
<p>其实造成这些原因的很大一部分原因是由于代码规范的问题，如果写的规范，注释好，其实很多问题也就解决了。所以本文我就从代码的编写规范，格式的优化，设计原则和一些常见的代码优化的技巧等方面总结了了45个小技巧分享给大家，如果不足，欢迎指正。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/c160f472e085489c98d8846a30c8da64" alt="img" loading="lazy"></p>
<h2 id="_1、规范命名" tabindex="-1"> 1、规范命名</h2>
<p>命名是写代码中最频繁的操作，比如类、属性、方法、参数等。好的名字应当能遵循以下几点：</p>
<h6 id="见名知意" tabindex="-1"> 见名知意</h6>
<p>比如需要定义一个变量需要来计数</p>
<div data-ext="java"><pre><code><span>int</span> i <span>=</span> <span>0</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p>名称 i 没有任何的实际意义，没有体现出数量的意思，所以我们应当指明数量的名称</p>
<div data-ext="java"><pre><code><span>int</span> count <span>=</span> <span>0</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h6 id="能够读的出来" tabindex="-1"> 能够读的出来</h6>
<p>如下代码：</p>
<div data-ext="java"><pre><code><span>private</span> <span>String</span> sfzh<span>;</span>
<span>private</span> <span>String</span> dhhm<span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>这些变量的名称，根本读不出来，更别说实际意义了。</p>
<p>所以我们可以使用正确的可以读出来的英文来命名</p>
<div data-ext="java"><pre><code><span>private</span> <span>String</span> idCardNo<span>;</span>
<span>private</span> <span>String</span> phone<span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h2 id="_2、规范代码格式" tabindex="-1"> 2、规范代码格式</h2>
<p>好的代码格式能够让人感觉看起来代码更加舒适。</p>
<p>好的代码格式应当遵守以下几点：</p>
<ul>
<li>合适的空格</li>
<li>代码对齐，比如大括号要对齐</li>
<li>及时换行，一行不要写太多代码</li>
</ul>
<p>好在现在开发工具支持一键格式化，可以帮助美化代码格式。</p>
<h2 id="_3、写好代码注释" tabindex="-1"> 3、写好代码注释</h2>
<p>在《代码整洁之道》这本书中作者提到了一个观点，注释的恰当用法是用来弥补我们在用代码表达意图时的失败。换句话说，当无法通过读代码来了解代码所表达的意思的时候，就需要用注释来说明。</p>
<p>作者之所以这么说，是因为作者觉得随着时间的推移，代码可能会变动，如果不及时更新注释，那么注释就容易产生误导，偏离代码的实际意义。而不及时更新注释的原因是，程序员不喜欢写注释。（作者很懂啊）</p>
<p>但是这不意味着可以不写注释，当通过代码如果无法表达意思的时候，就需要注释，比如如下代码</p>
<div data-ext="java"><pre><code><span>for</span> <span>(</span><span>Integer</span> id <span>:</span> ids<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>id <span>==</span> <span>0</span><span>)</span> <span>{</span>
        <span>continue</span><span>;</span>
    <span>}</span>
    <span>//做其他事</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>为什么 id == 0 需要跳过，代码是无法看出来了，就需要注释了。</p>
<p>好的注释应当满足一下几点：</p>
<ul>
<li>解释代码的意图，说明为什么这么写，用来做什么</li>
<li>对参数和返回值注释，入参代表什么，出参代表什么</li>
<li>有警示作用，比如说入参不能为空，或者代码是不是有坑</li>
<li>当代码还未完成时可以使用 todo 注释来注释</li>
</ul>
<h2 id="_4、try-catch-内部代码抽成一个方法" tabindex="-1"> 4、try catch 内部代码抽成一个方法</h2>
<p>try catch代码有时会干扰我们阅读核心的代码逻辑，这时就可以把try catch内部主逻辑抽离成一个单独的方法</p>
<p>如下图是Eureka服务端源码中服务下线的实现中的一段代码</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/01e8a9f76bbb4f5e8eff9d8b8477b6f8" alt="img" loading="lazy"></p>
<p>整个方法非常长，try中代码是真正的服务下线的代码实现，finally可以保证读锁最终一定可以释放。</p>
<p>所以这段代码其实就可以对核心的逻辑进行抽取。</p>
<div data-ext="java"><pre><code><span>protected</span> <span>boolean</span> <span>internalCancel</span><span>(</span><span>String</span> appName<span>,</span> <span>String</span> id<span>,</span> <span>boolean</span> isReplication<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
        read<span>.</span><span>lock</span><span>(</span><span>)</span><span>;</span>
        <span>doInternalCancel</span><span>(</span>appName<span>,</span> id<span>,</span> isReplication<span>)</span><span>;</span>
    <span>}</span> <span>finally</span> <span>{</span>
        read<span>.</span><span>unlock</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 剩余代码</span>
<span>}</span>

<span>private</span> <span>boolean</span> <span>doInternalCancel</span><span>(</span><span>String</span> appName<span>,</span> <span>String</span> id<span>,</span> <span>boolean</span> isReplication<span>)</span> <span>{</span>
    <span>//真正处理下线的逻辑</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_5、方法别太长" tabindex="-1"> 5、方法别太长</h2>
<p>方法别太长就是字面的意思。一旦代码太长，给人的第一眼感觉就很复杂，让人不想读下去；同时方法太长的代码可能读起来容易让人摸不着头脑，不知道哪一些代码是同一个业务的功能。</p>
<p>我曾经就遇到过一个方法写了2000+行，各种if else判断，我光理清代码思路就用了很久，最终理清之后，就用策略模式给重构了。</p>
<p>所以一旦方法过长，可以尝试将相同业务功能的代码单独抽取一个方法，最后在主方法中调用即可。</p>
<h2 id="_6、抽取重复代码" tabindex="-1"> 6、抽取重复代码</h2>
<p>当一份代码重复出现在程序的多处地方，就会造成程序又臭又长，当这份代码的结构要修改时，每一处出现这份代码的地方都得修改，导致程序的扩展性很差。</p>
<p>所以一般遇到这种情况，可以抽取成一个工具类，还可以抽成一个公共的父类。</p>
<h2 id="_7、多用return" tabindex="-1"> 7、多用return</h2>
<p>在有时我们平时写代码的情况可能会出现if条件套if的情况，当if条件过多的时候可能会出现如下情况：</p>
<div data-ext="java"><pre><code><span>if</span> <span>(</span>条件<span>1</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>条件<span>2</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>条件<span>3</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>条件<span>4</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span>条件<span>5</span><span>)</span> <span>{</span>
                    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"三友的java日记"</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>面对这种情况，可以换种思路，使用return来优化</p>
<div data-ext="java"><pre><code><span>if</span> <span>(</span><span>!</span>条件<span>1</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
<span>}</span>
<span>if</span> <span>(</span><span>!</span>条件<span>2</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
<span>}</span>
<span>if</span> <span>(</span><span>!</span>条件<span>3</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
<span>}</span>
<span>if</span> <span>(</span><span>!</span>条件<span>4</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
<span>}</span>
<span>if</span> <span>(</span><span>!</span>条件<span>5</span><span>)</span> <span>{</span>
    <span>return</span><span>;</span>
<span>}</span>

<span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"三友的java日记"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样优化就感觉看起来更加直观</p>
<h2 id="_8、if条件表达式不要太复杂" tabindex="-1"> 8、if条件表达式不要太复杂</h2>
<p>比如在如下代码：</p>
<div data-ext="java"><pre><code><span>if</span> <span>(</span><span>(</span><span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span>
      <span>||</span> <span>"三友的java日记"</span><span>.</span><span>equals</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span>
     <span>&amp;&amp;</span> <span>(</span>person<span>.</span><span>getAge</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> person<span>.</span><span>getAge</span><span>(</span><span>)</span> <span>></span> <span>10</span><span>)</span><span>)</span>
    <span>&amp;&amp;</span> <span>"汉"</span><span>.</span><span>equals</span><span>(</span>person<span>.</span><span>getNational</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
    <span>// 处理逻辑</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这段逻辑，这种条件表达式乍一看不知道是什么，仔细一看还是不知道是什么，这时就可以这么优化</p>
<div data-ext="java"><pre><code><span>boolean</span> sanyouOrBlank <span>=</span> <span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span> <span>||</span> <span>"三友的java日记"</span><span>.</span><span>equals</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>boolean</span> ageGreaterThanTen <span>=</span> person<span>.</span><span>getAge</span><span>(</span><span>)</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> person<span>.</span><span>getAge</span><span>(</span><span>)</span> <span>></span> <span>10</span><span>;</span>
<span>boolean</span> isHanNational <span>=</span> <span>"汉"</span><span>.</span><span>equals</span><span>(</span>person<span>.</span><span>getNational</span><span>(</span><span>)</span><span>)</span><span>;</span>

<span>if</span> <span>(</span>sanyouOrBlank
    <span>&amp;&amp;</span> ageGreaterThanTen
    <span>&amp;&amp;</span> isHanNational<span>)</span> <span>{</span>
    <span>// 处理逻辑</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时就很容易看懂if的逻辑了</p>
<h2 id="_9、优雅地参数校验" tabindex="-1"> 9、优雅地参数校验</h2>
<p>当前端传递给后端参数的时候，通常需要对参数进场检验，一般可能会这么写</p>
<div data-ext="java"><pre><code><span>@PostMapping</span>
<span>public</span> <span>void</span> <span>addPerson</span><span>(</span><span>@RequestBody</span> <span>AddPersonRequest</span> addPersonRequest<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>addPersonRequest<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>BizException</span><span>(</span><span>"人员姓名不能为空"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isBlank</span><span>(</span>addPersonRequest<span>.</span><span>getIdCardNo</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>BizException</span><span>(</span><span>"身份证号不能为空"</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 处理新增逻辑</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这种写虽然可以，但是当字段的多的时候，光校验就占据了很长的代码，不够优雅。</p>
<p>针对参数校验这个问题，有第三方库已经封装好了，比如hibernate-validator框架，只需要拿来用即可。</p>
<p>所以就在实体类上加@NotBlank、@NotNull注解来进行校验</p>
<div data-ext="java"><pre><code><span>@Data</span>
<span>@ToString</span>
<span>private</span> <span>class</span> <span>AddPersonRequest</span> <span>{</span>

    <span>@NotBlank</span><span>(</span>message <span>=</span> <span>"人员姓名不能为空"</span><span>)</span>
    <span>private</span> <span>String</span> name<span>;</span>
    <span>@NotBlank</span><span>(</span>message <span>=</span> <span>"身份证号不能为空"</span><span>)</span>
    <span>private</span> <span>String</span> idCardNo<span>;</span>
        
    <span>//忽略</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>此时Controller接口就需要方法上就需要加上@Valid注解</p>
<div data-ext="java"><pre><code><span>@PostMapping</span>
<span>public</span> <span>void</span> <span>addPerson</span><span>(</span><span>@RequestBody</span> <span>@Valid</span> <span>AddPersonRequest</span> addPersonRequest<span>)</span> <span>{</span>
    <span>// 处理新增逻辑</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h2 id="_10、统一返回值" tabindex="-1"> 10、统一返回值</h2>
<p>后端在设计接口的时候，需要统一返回值</p>
<div data-ext="java"><pre><code><span>{</span>  
    <span>"code"</span><span>:</span><span>0</span><span>,</span>
    <span>"message"</span><span>:</span><span>"成功"</span><span>,</span>
    <span>"data"</span><span>:</span><span>"返回数据"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>不仅是给前端参数，也包括提供给第三方的接口等，这样接口调用方法可以按照固定的格式解析代码，不用进行判断。如果不一样，相信我，前端半夜都一定会来找你。</p>
<p>Spring中很多方法可以做到统一返回值，而不用每个方法都返回，比如基于AOP，或者可以自定义HandlerMethodReturnValueHandler来实现统一返回值。</p>
<h2 id="_11、统一异常处理" tabindex="-1"> 11、统一异常处理</h2>
<p>当你没有统一异常处理的时候，那么所有的接口避免不了try catch操作。</p>
<div data-ext="java"><pre><code><span>@GetMapping</span><span>(</span><span>"/{id}"</span><span>)</span>
<span>public</span> <span>Result</span><span><span>&lt;</span><span>T</span><span>></span></span> <span>selectPerson</span><span>(</span><span>@PathVariable</span><span>(</span><span>"id"</span><span>)</span> <span>Long</span> personId<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
        <span>PersonVO</span> vo <span>=</span> personService<span>.</span><span>selectById</span><span>(</span>personId<span>)</span><span>;</span>
        <span>return</span> <span>Result</span><span>.</span><span>success</span><span>(</span>vo<span>)</span><span>;</span>
    <span>}</span> <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span> <span>{</span>
        <span>//打印日志</span>
        <span>return</span> <span>Result</span><span>.</span><span>error</span><span>(</span><span>"系统异常"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>每个接口都得这么玩，那不得满屏的try catch。</p>
<p>所以可以基于Spring提供的统一异常处理机制来完成。</p>
<h2 id="_12、尽量不传递null值" tabindex="-1"> 12、尽量不传递null值</h2>
<p>这个很好理解，不传null值可以避免方法不支持为null入参时产生的空指针问题。</p>
<p>当然为了更好的表明该方法是不是可以传null值，可以通过@NonNull和@Nullable注解来标记。@NonNull就表示不能传null值，@Nullable就是可以传null值。</p>
<div data-ext="java"><pre><code><span>//示例1</span>
<span>public</span> <span>void</span> <span>updatePerson</span><span>(</span><span>@Nullable</span> <span>Person</span> person<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>person <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>return</span><span>;</span>
    <span>}</span>
    personService<span>.</span><span>updateById</span><span>(</span>person<span>)</span><span>;</span>
<span>}</span>

<span>//示例2</span>
<span>public</span> <span>void</span> <span>updatePerson</span><span>(</span><span>@NonNull</span> <span>Person</span> person<span>)</span> <span>{</span>
    personService<span>.</span><span>updateById</span><span>(</span>person<span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_13、尽量不返回null值" tabindex="-1"> 13、尽量不返回null值</h2>
<p>尽量不返回null值是为了减少调用者对返回值的为null判断，如果无法避免返回null值，可以通过返回Optional来代替null值。</p>
<div data-ext="java"><pre><code><span>public</span> <span>Optional</span><span><span>&lt;</span><span>Person</span><span>></span></span> <span>getPersonById</span><span>(</span><span>Long</span> personId<span>)</span> <span>{</span>
    <span>return</span> <span>Optional</span><span>.</span><span>ofNullable</span><span>(</span>personService<span>.</span><span>selectById</span><span>(</span>personId<span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>如果不想这么写，也可以通过@NonNull和@Nullable表示方法会不会返回null值。</p>
<h2 id="_14、日志打印规范" tabindex="-1"> 14、日志打印规范</h2>
<p>好的日志打印能帮助我们快速定位问题</p>
<p>好的日志应该遵循以下几点：</p>
<ul>
<li>可搜索性，要有明确的关键字信息</li>
<li>异常日志需要打印出堆栈信息</li>
<li>合适的日志级别，比如异常使用error，正常使用info</li>
<li>日志内容太大不打印，比如有时需要将图片转成Base64，那么这个Base64就可以不用打印</li>
</ul>
<h2 id="_15、统一类库" tabindex="-1"> 15、统一类库</h2>
<p>在一个项目中，可能会由于引入的依赖不同导致引入了很多相似功能的类库，比如常见的json类库，又或者是一些常用的工具类，当遇到这种情况下，应当规范在项目中到底应该使用什么类库，而不是一会用Fastjson，一会使用Gson。</p>
<h2 id="_16、尽量使用工具类" tabindex="-1"> 16、尽量使用工具类</h2>
<p>比如在对集合判空的时候，可以这么写</p>
<div data-ext="java"><pre><code><span>public</span> <span>void</span> <span>updatePersons</span><span>(</span><span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> persons<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>persons <span>!=</span> <span>null</span> <span>&amp;&amp;</span> persons<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
           
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>但是一般不推荐这么写，可以通过一些判断的工具类来写</p>
<div data-ext="java"><pre><code><span>public</span> <span>void</span> <span>updatePersons</span><span>(</span><span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> persons<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>CollectionUtils</span><span>.</span><span>isEmpty</span><span>(</span>persons<span>)</span><span>)</span> <span>{</span>

    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>不仅集合，比如字符串的判断等等，就使用工具类，不要手动判断。</p>
<h2 id="_17、尽量不要重复造轮子" tabindex="-1"> 17、尽量不要重复造轮子</h2>
<p>就拿格式化日期来来说，我们一般封装成一个工具类来调用，比如如下代码</p>
<div data-ext="java"><pre><code><span>private</span> <span>static</span> <span>final</span> <span>SimpleDateFormat</span> <span>DATE_TIME_FORMAT</span> <span>=</span> <span>new</span> <span>SimpleDateFormat</span><span>(</span><span>"yyyy-MM-dd HH:mm:ss"</span><span>)</span><span>;</span>

<span>public</span> <span>static</span> <span>String</span> <span>formatDateTime</span><span>(</span><span>Date</span> date<span>)</span> <span>{</span>
    <span>return</span> <span>DATE_TIME_FORMAT</span><span>.</span><span>format</span><span>(</span>date<span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>这段代码看似没啥问题，但是却忽略了SimpleDateFormat是个线程不安全的类，所以这就会引起坑。</p>
<p>一般对于这种已经有开源的项目并且已经做得很好的时候，比如Hutool，就可以把轮子直接拿过来用了。</p>
<h2 id="_18、类和方法单一职责" tabindex="-1"> 18、类和方法单一职责</h2>
<p>单一职责原则是设计模式的七大设计原则之一，它的核心意思就是字面的意思，一个类或者一个方法只做单一的功能。</p>
<p>就拿Nacos来说，在Nacos1.x的版本中，有这么一个接口HttpAgent</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/6c7b04cc34104b9681bbb46ff8061114" alt="img" loading="lazy"></p>
<p>这个类只干了一件事，那就是封装http请求参数，向Nacos服务端发送请求，接收响应，这其实就是单一职责原则的体现。</p>
<p>当其它的地方需要向Nacos服务端发送请求时，只需要通过这个接口的实现，传入参数就可以发送请求了，而不需要关心如何携带服务端鉴权参数、http请求参数如何组装等问题。</p>
<h2 id="_19、尽量使用聚合-组合代替继承" tabindex="-1"> 19、尽量使用聚合/组合代替继承</h2>
<p>继承的弊端：</p>
<ul>
<li>灵活性低。java语言是单继承的，无法同时继承很多类，并且继承容易导致代码层次太深，不易于维护</li>
<li>耦合性高。一旦父类的代码修改，可能会影响到子类的行为</li>
</ul>
<p>所以一般推荐使用聚合/组合代替继承。</p>
<p>聚合/组合的意思就是通过成员变量的方式来使用类。</p>
<p>比如说，OrderService需要使用UserService，可以注入一个UserService而非通过继承UserService。</p>
<p>聚合和组合的区别就是，组合是当对象一创建的时候，就直接给属性赋值，而聚合的方式可以通过set方式来设置。</p>
<p>组合：</p>
<div data-ext="java"><pre><code><span>public</span> <span>class</span> <span>OrderService</span> <span>{</span>

    <span>private</span> <span>UserService</span> userService <span>=</span> <span>new</span> <span>UserService</span><span>(</span><span>)</span><span>;</span>

<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>聚合：</p>
<div data-ext="java"><pre><code><span>public</span> <span>class</span> <span>OrderService</span> <span>{</span>
    
    <span>private</span> <span>UserService</span> userService<span>;</span>

    <span>public</span> <span>void</span> <span>setUserService</span><span>(</span><span>UserService</span> userService<span>)</span> <span>{</span>
        <span>this</span><span>.</span>userService <span>=</span> userService<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_20、使用设计模式优化代码" tabindex="-1"> 20、使用设计模式优化代码</h2>
<p>在平时开发中，使用设计模式可以增加代码的扩展性。</p>
<p>比如说，当你需要做一个可以根据不同的平台做不同消息推送的功能时，就可以使用策略模式的方式来优化。</p>
<p>设计一个接口：</p>
<div data-ext="java"><pre><code><span>public</span> <span>interface</span> <span>MessageNotifier</span> <span>{</span>

    <span>/**
     * 是否支持改类型的通知的方式
     *
     * <span>@param</span> <span>type</span> 0:短信 1:app
     * <span>@return</span>
     */</span>
    <span>boolean</span> <span>support</span><span>(</span><span>int</span> type<span>)</span><span>;</span>

    <span>/**
     * 通知
     *
     * <span>@param</span> <span>user</span>
     * <span>@param</span> <span>content</span>
     */</span>
    <span>void</span> <span>notify</span><span>(</span><span>User</span> user<span>,</span> <span>String</span> content<span>)</span><span>;</span>

<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>短信通知实现：</p>
<div data-ext="java"><pre><code><span>@Component</span>
<span>public</span> <span>class</span> <span>SMSMessageNotifier</span> <span>implements</span> <span>MessageNotifier</span> <span>{</span>
    <span>@Override</span>
    <span>public</span> <span>boolean</span> <span>support</span><span>(</span><span>int</span> type<span>)</span> <span>{</span>
        <span>return</span> type <span>==</span> <span>0</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>notify</span><span>(</span><span>User</span> user<span>,</span> <span>String</span> content<span>)</span> <span>{</span>
        <span>//调用短信通知的api发送短信</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>app通知实现：</p>
<div data-ext="java"><pre><code><span>public</span> <span>class</span> <span>AppMessageNotifier</span> <span>implements</span> <span>MessageNotifier</span> <span>{</span>
    <span>@Override</span>
    <span>public</span> <span>boolean</span> <span>support</span><span>(</span><span>int</span> type<span>)</span> <span>{</span>
        <span>return</span> type <span>==</span> <span>1</span><span>;</span>
    <span>}</span>

    <span>@Override</span>
    <span>public</span> <span>void</span> <span>notify</span><span>(</span><span>User</span> user<span>,</span> <span>String</span> content<span>)</span> <span>{</span>
       <span>//调用通知app通知的api</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>最后提供一个方法，当需要进行消息通知时，调用notifyMessage，传入相应的参数就行。</p>
<div data-ext="java"><pre><code><span>@Resource</span>
<span>private</span> <span>List</span><span><span>&lt;</span><span>MessageNotifier</span><span>></span></span> messageNotifiers<span>;</span>

<span>public</span> <span>void</span> <span>notifyMessage</span><span>(</span><span>User</span> user<span>,</span> <span>String</span> content<span>,</span> <span>int</span> notifyType<span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>MessageNotifier</span> messageNotifier <span>:</span> messageNotifiers<span>)</span> <span>{</span>
        <span>if</span> <span>(</span>messageNotifier<span>.</span><span>support</span><span>(</span>notifyType<span>)</span><span>)</span> <span>{</span>
            messageNotifier<span>.</span><span>notify</span><span>(</span>user<span>,</span> content<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>假设此时需要支持通过邮件通知，只需要有对应实现就行。</p>
<h2 id="_21、不滥用设计模式" tabindex="-1"> 21、不滥用设计模式</h2>
<p>用好设计模式可以增加代码的扩展性，但是滥用设计模式确是不可取的。</p>
<div data-ext="java"><pre><code><span>public</span> <span>void</span> <span>printPerson</span><span>(</span><span>Person</span> person<span>)</span> <span>{</span>
    <span>StringBuilder</span> sb <span>=</span> <span>new</span> <span>StringBuilder</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isNotBlank</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        sb<span>.</span><span>append</span><span>(</span><span>"姓名:"</span><span>)</span><span>.</span><span>append</span><span>(</span>person<span>.</span><span>getName</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>StringUtils</span><span>.</span><span>isNotBlank</span><span>(</span>person<span>.</span><span>getIdCardNo</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        sb<span>.</span><span>append</span><span>(</span><span>"身份证号:"</span><span>)</span><span>.</span><span>append</span><span>(</span>person<span>.</span><span>getIdCardNo</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>

    <span>// 省略</span>
    <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span>sb<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>比如上面打印Person信息的代码，用if判断就能够做到效果，你说我要不用责任链或者什么设计模式来优化一下吧，没必要。</p>
<h2 id="_22、面向接口编程" tabindex="-1"> 22、面向接口编程</h2>
<p>在一些可替换的场景中，应该引用父类或者抽象，而非实现。</p>
<p>举个例子，在实际项目中可能需要对一些图片进行存储，但是存储的方式很多，比如可以选择阿里云的OSS，又或者是七牛云，存储服务器等等。所以对于存储图片这个功能来说，这些具体的实现是可以相互替换的。</p>
<p>所以在项目中，我们不应当在代码中耦合一个具体的实现，而是可以提供一个存储接口</p>
<div data-ext="java"><pre><code><span>public</span> <span>interface</span> <span>FileStorage</span> <span>{</span>
    
    <span>String</span> <span>store</span><span>(</span><span>String</span> fileName<span>,</span> <span>byte</span><span>[</span><span>]</span> bytes<span>)</span><span>;</span>

<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>如果选择了阿里云OSS作为存储服务器，那么就可以基于OSS实现一个FileStorage，在项目中哪里需要存储的时候，只要实现注入这个接口就可以了。</p>
<div data-ext="java"><pre><code><span>@Autowired</span>
<span>private</span> <span>FileStorage</span> fileStorage<span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>假设用了一段时间之后，发现阿里云的OSS比较贵，此时想换成七牛云的，那么此时只需要基于七牛云的接口实现FileStorage接口，然后注入到IOC，那么原有代码用到FileStorage根本不需要动，实现轻松的替换。</p>
<h2 id="_23、经常重构旧的代码" tabindex="-1"> 23、经常重构旧的代码</h2>
<p>随着时间的推移，业务的增长，有的代码可能不再适用，或者有了更好的设计方式，那么可以及时的重构业务代码。</p>
<p>就拿上面的消息通知为例，在业务刚开始的时候可能只支持短信通知，于是在代码中就直接耦合了短信通知的代码。但是随着业务的增长，逐渐需要支持app、邮件之类的通知，那么此时就可以重构以前的代码，抽出一个策略接口，进行代码优化。</p>
<h2 id="_24、null值判断" tabindex="-1"> 24、null值判断</h2>
<p>空指针是代码开发中的一个难题，作为程序员的基本修改，应该要防止空指针。</p>
<p>可能产生空指针的原因：</p>
<ul>
<li>数据返回对象为null</li>
<li>自动拆箱导致空指针</li>
<li>rpc调用返回的对象可能为空格</li>
</ul>
<p>所以在需要这些的时候，需要强制判断是否为null。前面也提到可以使用Optional来优雅地进行null值判断。</p>
<h2 id="_25、pojo类重写tostring方法" tabindex="-1"> 25、pojo类重写toString方法</h2>
<p>pojo一般内部都有很多属性，重写toString方法可以方便在打印或者测试的时候查看内部的属性。</p>
<h2 id="_26、魔法值用常量表示" tabindex="-1"> 26、魔法值用常量表示</h2>
<div data-ext="java"><pre><code><span>public</span> <span>void</span> <span>sayHello</span><span>(</span><span>String</span> province<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>"广东省"</span><span>.</span><span>equals</span><span>(</span>province<span>)</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"靓仔~~"</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"帅哥~~"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>代码里，广东省就是一个魔法值，那么就可以将用一个常量来保存</p>
<div data-ext="java"><pre><code><span>private</span> <span>static</span> <span>final</span> <span>String</span> <span>GUANG_DONG_PROVINCE</span> <span>=</span> <span>"广东省"</span><span>;</span>

<span>public</span> <span>void</span> <span>sayHello</span><span>(</span><span>String</span> province<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>GUANG_DONG_PROVINCE</span><span>.</span><span>equals</span><span>(</span>province<span>)</span><span>)</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"靓仔~~"</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>System</span><span>.</span>out<span>.</span><span>println</span><span>(</span><span>"帅哥~~"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_27、资源释放写到finally" tabindex="-1"> 27、资源释放写到finally</h2>
<p>比如在使用一个api类锁或者进行IO操作的时候，需要主动写代码需释放资源，为了能够保证资源能够被真正释放，那么就需要在finally中写代码保证资源释放。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/9dde17a743ca4edea430579ca006b74f" alt="img" loading="lazy"></p>
<p>如图所示，就是CopyOnWriteArrayList的add方法的实现，最终是在finally中进行锁的释放。</p>
<h2 id="_28、使用线程池代替手动创建线程" tabindex="-1"> 28、使用线程池代替手动创建线程</h2>
<p>使用线程池还有以下好处：</p>
<ul>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统 的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
</ul>
<p>所以为了达到更好的利用资源，提高响应速度，就可以使用线程池的方式来代替手动创建线程。</p>
<p>如果对线程池不清楚的同学，可以看一下这篇文章:<a href="https://mp.weixin.qq.com/s?__biz=Mzg5MDczNDI0Nw==&amp;mid=2247491081&amp;idx=1&amp;sn=4dddb33a76a4ee1f4c52b24059fb2eb8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer">7000字+24张图带你彻底弄懂线程池</a></p>
<h2 id="_29、线程设置名称" tabindex="-1"> 29、线程设置名称</h2>
<p>在日志打印的时候，日志是可以把线程的名字给打印出来。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/db0318baef2848a5aab38898997298f5" alt="img" loading="lazy"></p>
<p>如上图，日志打印出来的就是tom猫的线程。</p>
<p>所以，设置线程的名称可以帮助我们更好的知道代码是通过哪个线程执行的，更容易排查问题。</p>
<h2 id="_30、涉及线程间可见性加volatile" tabindex="-1"> 30、涉及线程间可见性加volatile</h2>
<p>在RocketMQ源码中有这么一段代码</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/c9e65f5ebc2043cb9256e42a513d4396" alt="img" loading="lazy"></p>
<p>在消费者在从服务端拉取消息的时候，会单独开一个线程，执行while循环，只要stopped状态一直为false，那么就会一直循环下去，线程就一直会运行下去，拉取消息。</p>
<p>当消费者客户端关闭的时候，就会将stopped状态设置为true，告诉拉取消息的线程需要停止了。但是由于并发编程中存在可见性的问题，所以虽然客户端关闭线程将stopped状态设置为true，但是拉取消息的线程可能看不见，不能及时感知到数据的修改，还是认为stopped状态设置为false，那么就还会运行下去。</p>
<p>针对这种可见性的问题，java提供了一个volatile关键字来保证线程间的可见性。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/5eb6d0ff1bca47d6b8f7199830272c2b" alt="img" loading="lazy"></p>
<p>所以，源码中就加了volatile关键字。</p>
<p>加了volatile关键字之后，一旦客户端的线程将stopped状态设置为true时候，拉取消息的线程就能立马知道stopped已经是false了，那么再次执行while条件判断的时候，就不成立，线程就运行结束了，然后退出。</p>
<h2 id="_31、考虑线程安全问题" tabindex="-1"> 31、考虑线程安全问题</h2>
<p>在平时开发中，有时需要考虑并发安全的问题。</p>
<p>举个例子来说，一般在调用第三方接口的时候，可能会有一个鉴权的机制，一般会携带一个请求头token参数过去，而token也是调用第三方接口返回的，一般这种token都会有个过期时间，比如24小时。</p>
<p>我们一般会将token缓存到Redis中，设置一个过期时间。向第三方发送请求时，会直接从缓存中查找，但是当从Redis中获取不到token的时候，我们都会重新请求token接口，获取token，然后再设置到缓存中。</p>
<p>整个过程看起来是没什么问题，但是实则隐藏线程安全问题。</p>
<p>假设当出现并发的时候，同时来两个线程AB从缓存查找，发现没有，那么AB此时就会同时调用token获取接口。假设A先获取到token，B后获取到token，但是由于CPU调度问题，线程B虽然后获取到token，但是先往Redis存数据，而线程A后存，覆盖了B请求的token。</p>
<p>这下就会出现大问题，最新的token被覆盖了，那么之后一定时间内token都是无效的，接口就请求不通。</p>
<p>针对这种问题，可以使用double check机制来优化获取token的问题。</p>
<p>所以，在实际中，需要多考虑考虑业务是否有线程安全问题，有集合读写安全问题，那么就用线程安全的集合，业务有安全的问题，那么就可以通过加锁的手段来解决。</p>
<h2 id="_32、慎用异步" tabindex="-1"> 32、慎用异步</h2>
<p>虽然在使用多线程可以帮助我们提高接口的响应速度，但是也会带来很多问题。</p>
<h5 id="事务问题" tabindex="-1"> 事务问题</h5>
<p>一旦使用了异步，就会导致两个线程不是同一个事务的，导致异常之后无法正常回滚数据。</p>
<h5 id="cpu负载过高" tabindex="-1"> cpu负载过高</h5>
<p>之前有个小伙伴遇到需要同时处理几万调数据的需求，每条数据都需要调用很多次接口，为了达到老板期望的时间要求，使用了多线程跑，开了很多线程，此时会发现系统的cpu会飙升</p>
<h5 id="意想不到的异常" tabindex="-1"> 意想不到的异常</h5>
<p>还是上面的提到的例子，在测试的时候就发现，由于并发量激增，在请求第三方接口的时候，返回了很多错误信息，导致有的数据没有处理成功。</p>
<p>虽然说慎用异步，但不代表不用，如果可以保证事务的问题，或是CPU负载不会高的话，那么还是可以使用的。</p>
<h2 id="_33、减小锁的范围" tabindex="-1"> 33、减小锁的范围</h2>
<p>减小锁的范围就是给需要加锁的代码加锁，不需要加锁的代码不要加锁。这样就能减少加锁的时间，从而可以较少锁互斥的时间，提高效率。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/a6d563b99f4540959b21ea2aaf38f1a0" alt="img" loading="lazy"></p>
<p>比如CopyOnWriteArrayList的addAll方法的实现，lock.lock(); 代码完全可以放到代码的第一行，但是作者并没有，因为前面判断的代码不会有线程安全的问题，不放到加锁代码中可以减少锁抢占和占有的时间。</p>
<h2 id="_34、有类型区分时定义好枚举" tabindex="-1"> 34、有类型区分时定义好枚举</h2>
<p>比如在项目中不同的类型的业务可能需要上传各种各样的附件，此时就可以定义好不同的一个附件的枚举，来区分不同业务的附件。</p>
<p>不要在代码中直接写死，不定义枚举，代码阅读起来非常困难，直接看到数字都是懵逼的。。</p>
<h2 id="_35、远程接口调用设置超时时间" tabindex="-1"> 35、远程接口调用设置超时时间</h2>
<p>比如在进行微服务之间进行rpc调用的时候，又或者在调用第三方提供的接口的时候，需要设置超时时间，防止因为各种原因，导致线程”卡死“在那。</p>
<p>我以前就遇到过线上就遇到过这种问题。当时的业务是订阅kafka的消息，然后向第三方上传数据。在某个周末，突然就接到电话，说数据无法上传了，通过排查线上的服务器才发现所有的线程都线程”卡死“了，最后定位到代码才发现原来是没有设置超时时间。</p>
<h2 id="_36、集合使用应当指明初始化大小" tabindex="-1"> 36、集合使用应当指明初始化大小</h2>
<p>比如在写代码的时候，经常会用到List、Map来临时存储数据，其中最常用的就是ArrayList和HashMap。但是用不好可能也会导致性能的问题。</p>
<p>比如说，在ArrayList中，底层是基于数组来存储的，数组是一旦确定大小是无法再改变容量的。但不断的往ArrayList中存储数据的时候，总有那么一刻会导致数组的容量满了，无法再存储其它元素，此时就需要对数组扩容。所谓的扩容就是新创建一个容量是原来1.5倍的数组，将原有的数据给拷贝到新的数组上，然后用新的数组替代原来的数组。</p>
<p>在扩容的过程中，由于涉及到数组的拷贝，就会导致性能消耗；同时HashMap也会由于扩容的问题，消耗性能。所以在使用这类集合时可以在构造的时候指定集合的容量大小。</p>
<h2 id="_37、尽量不要使用beanutils来拷贝属性" tabindex="-1"> 37、尽量不要使用BeanUtils来拷贝属性</h2>
<p>在开发中经常需要对JavaBean进行转换，但是又不想一个一个手动set，比较麻烦，所以一般会使用属性拷贝的一些工具，比如说Spring提供的BeanUtils来拷贝。不得不说，使用BeanUtils来拷贝属性是真的舒服，使用一行代码可以代替几行甚至十几行代码，我也喜欢用。</p>
<p>但是喜欢归喜欢，但是会带来性能问题，因为底层是通过反射来的拷贝属性的，所以尽量不要用BeanUtils来拷贝属性。</p>
<p>比如你可以装个JavaBean转换的插件，帮你自动生成转换代码；又或者可以使用性能更高的MapStruct来进行JavaBean转换，MapStruct底层是通过调用（settter/getter）来实现的，而不是反射来快速执行。</p>
<h2 id="_38、使用stringbuilder进行字符串拼接" tabindex="-1"> 38、使用StringBuilder进行字符串拼接</h2>
<p>如下代码：</p>
<div data-ext="java"><pre><code><span>String</span> str1 <span>=</span> <span>"123"</span><span>;</span>
<span>String</span> str2 <span>=</span> <span>"456"</span><span>;</span>
<span>String</span> str3 <span>=</span> <span>"789"</span><span>;</span>
<span>String</span> str4 <span>=</span> str1 <span>+</span> str2 <span>+</span> str3<span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>使用 + 拼接字符串的时候，会创建一个StringBuilder，然后将要拼接的字符串追加到StringBuilder，再toString，这样如果多次拼接就会执行很多次的创建StringBuilder，z执行toString的操作。</p>
<p>所以可以手动通过StringBuilder拼接，这样只会创建一次StringBuilder，效率更高。</p>
<div data-ext="java"><pre><code><span>StringBuilder</span> sb <span>=</span> <span>new</span> <span>StringBuilder</span><span>(</span><span>)</span><span>;</span>
<span>String</span> str <span>=</span> sb<span>.</span><span>append</span><span>(</span><span>"123"</span><span>)</span><span>.</span><span>append</span><span>(</span><span>"456"</span><span>)</span><span>.</span><span>append</span><span>(</span><span>"789"</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h2 id="_39、-transactional应指定回滚的异常类型" tabindex="-1"> 39、@Transactional应指定回滚的异常类型</h2>
<p>平时在写代码的时候需要通过rollbackFor显示指定需要对什么异常回滚，原因在这：</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/827e2dec57344285885d0a00e7529f40" alt="img" loading="lazy"></p>
<p>默认是只能回滚RuntimeException和Error异常，所以需要手动指定，比如指定成Expection等。</p>
<h2 id="_40、谨慎方法内部调用动态代理的方法" tabindex="-1"> 40、谨慎方法内部调用动态代理的方法</h2>
<p>如下事务代码</p>
<div data-ext="java"><pre><code><span>@Service</span>
<span>public</span> <span>class</span> <span>PersonService</span> <span>{</span>

    <span>public</span> <span>void</span> <span>update</span><span>(</span><span>Person</span> person<span>)</span> <span>{</span>
        <span>// 处理</span>
        <span>updatePerson</span><span>(</span>person<span>)</span><span>;</span>
    <span>}</span>

    <span>@Transactional</span><span>(</span>rollbackFor <span>=</span> <span>Exception</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>void</span> <span>updatePerson</span><span>(</span><span>Person</span> person<span>)</span> <span>{</span>
        <span>// 处理</span>
    <span>}</span>

<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>update调用了加了@Transactional注解的updatePerson方法，那么此时updatePerson的事务就是失效。</p>
<p>其实失效的原因不是事务的锅，是由AOP机制决定的，因为事务是基于AOP实现的。AOP是基于对象的代理，当内部方法调用时，走的不是动态代理对象的方法，而是原有对象的方法调用，如此就走不到动态代理的代码，就会失效了。</p>
<p>如果实在需要让动态代理生效，可以注入自己的代理对象</p>
<div data-ext="java"><pre><code><span>@Service</span>
<span>public</span> <span>class</span> <span>PersonService</span> <span>{</span>

    <span>@Autowired</span>
    <span>private</span> <span>PersonService</span> personService<span>;</span>

    <span>public</span> <span>void</span> <span>update</span><span>(</span><span>Person</span> person<span>)</span> <span>{</span>
        <span>// 处理</span>
        personService<span>.</span><span>updatePerson</span><span>(</span>person<span>)</span><span>;</span>
    <span>}</span>

    <span>@Transactional</span><span>(</span>rollbackFor <span>=</span> <span>Exception</span><span>.</span><span>class</span><span>)</span>
    <span>public</span> <span>void</span> <span>updatePerson</span><span>(</span><span>Person</span> person<span>)</span> <span>{</span>
        <span>// 处理</span>
    <span>}</span>

<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_41、需要什么字段select什么字段" tabindex="-1"> 41、需要什么字段select什么字段</h2>
<p>查询全字段有以下几点坏处：</p>
<h6 id="增加不必要的字段的网络传输" tabindex="-1"> 增加不必要的字段的网络传输</h6>
<p>比如有些文本的字段，存储的数据非常长，但是本次业务使用不到，但是如果查了就会把这个数据返回给客户端，增加了网络传输的负担</p>
<h6 id="会导致无法使用到覆盖索引" tabindex="-1"> 会导致无法使用到覆盖索引</h6>
<p>比如说，现在有身份证号和姓名做了联合索引，现在只需要根据身份证号查询姓名，如果直接select name 的话，那么在遍历索引的时候，发现要查询的字段在索引中已经存在，那么此时就会直接从索引中将name字段的数据查出来，返回，而不会继续去查找聚簇索引，减少回表的操作。</p>
<p>所以建议是需要使用什么字段查询什么字段。比如mp也支持在构建查询条件的时候，查询某个具体的字段。</p>
<div data-ext="java"><pre><code> <span>Wrappers</span><span>.</span><span>query</span><span>(</span><span>)</span><span>.</span><span>select</span><span>(</span><span>"name"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div><h2 id="_42、不循环调用数据库" tabindex="-1"> 42、不循环调用数据库</h2>
<p>不要在循环中访问数据库，这样会严重影响数据库性能。</p>
<p>比如需要查询一批人员的信息，人员的信息存在基本信息表和扩展表中，错误的代码如下：</p>
<div data-ext="java"><pre><code><span>public</span> <span>List</span><span><span>&lt;</span><span>PersonVO</span><span>></span></span> <span>selectPersons</span><span>(</span><span>List</span><span><span>&lt;</span><span>Long</span><span>></span></span> personIds<span>)</span> <span>{</span>
    <span>List</span><span><span>&lt;</span><span>PersonVO</span><span>></span></span> persons <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span>personIds<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> personList <span>=</span> personMapper<span>.</span><span>selectByIds</span><span>(</span>personIds<span>)</span><span>;</span>
    <span>for</span> <span>(</span><span>Person</span> person <span>:</span> personList<span>)</span> <span>{</span>
        <span>PersonVO</span> vo <span>=</span> <span>new</span> <span>PersonVO</span><span>(</span><span>)</span><span>;</span>
        <span>PersonExt</span> personExt <span>=</span> personExtMapper<span>.</span><span>selectById</span><span>(</span>person<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 组装数据</span>
        persons<span>.</span><span>add</span><span>(</span>vo<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> persons<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>遍历每个人员的基本信息，去数据库查找。</p>
<p>正确的方法应该先批量查出来，然后转成map：</p>
<div data-ext="java"><pre><code><span>public</span> <span>List</span><span><span>&lt;</span><span>PersonVO</span><span>></span></span> <span>selectPersons</span><span>(</span><span>List</span><span><span>&lt;</span><span>Long</span><span>></span></span> personIds<span>)</span> <span>{</span>
    <span>List</span><span><span>&lt;</span><span>PersonVO</span><span>></span></span> persons <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span>personIds<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>List</span><span><span>&lt;</span><span>Person</span><span>></span></span> personList <span>=</span> personMapper<span>.</span><span>selectByIds</span><span>(</span>personIds<span>)</span><span>;</span>
    <span>//批量查询，转换成Map</span>
    <span>List</span><span><span>&lt;</span><span>PersonExt</span><span>></span></span> personExtList <span>=</span> personExtMapper<span>.</span><span>selectByIds</span><span>(</span>person<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>Map</span><span><span>&lt;</span><span>String</span><span>,</span> <span>PersonExt</span><span>></span></span> personExtMap <span>=</span> personExtList<span>.</span><span>stream</span><span>(</span><span>)</span><span>.</span><span>collect</span><span>(</span><span>Collectors</span><span>.</span><span>toMap</span><span>(</span><span>PersonExt</span><span>::</span><span>getPersonId</span><span>,</span> <span>Function</span><span>.</span><span>identity</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>for</span> <span>(</span><span>Person</span> person <span>:</span> personList<span>)</span> <span>{</span>
        <span>PersonVO</span> vo <span>=</span> <span>new</span> <span>PersonVO</span><span>(</span><span>)</span><span>;</span>
        <span>//直接从Map中查找</span>
        <span>PersonExt</span> personExt <span>=</span> personExtMap<span>.</span><span>get</span><span>(</span>person<span>.</span><span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>// 组装数据</span>
        persons<span>.</span><span>add</span><span>(</span>vo<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> persons<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="_43、用业务代码代替多表join" tabindex="-1"> 43、用业务代码代替多表join</h2>
<p>如上面代码所示，原本也可以将两张表根据人员的id进行关联查询。但是不推荐这么，阿里也禁止多表join的操作</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/f3636cd2f328476883f337a3daceca0f" alt="img" loading="lazy"></p>
<p>而之所以会禁用，是因为join的效率比较低。</p>
<p>MySQL是使用了嵌套循环的方式来实现关联查询的，也就是for循环会套for循环的意思。用第一张表做外循环，第二张表做内循环，外循环的每一条记录跟内循环中的记录作比较，符合条件的就输出，这种效率肯定低。</p>
<h2 id="_44、装上阿里代码检查插件" tabindex="-1"> 44、装上阿里代码检查插件</h2>
<p>我们平时写代码由于各种因为，比如什么领导啊，项目经理啊，会一直催进度，导致写代码都来不及思考，怎么快怎么来，cv大法上线，虽然有心想写好代码，但是手确不听使唤。所以我建议装一个阿里的代码规范插件，如果有代码不规范，会有提醒，这样就可以知道哪些是可以优化的了。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/50e4c80776ee4a73b0331441e8f648fb" alt="img" loading="lazy"></p>
<p>如果你有强迫症，相信我，装了这款插件，你的代码会写的很漂亮。</p>
<h2 id="_45、及时跟同事沟通" tabindex="-1"> 45、及时跟同事沟通</h2>
<p>写代码的时候不能闭门造车，及时跟同事沟通，比如刚进入一个新的项目的，对项目工程不熟悉，一些技术方案不了解，如果上来就直接写代码，很有可能就会踩坑。</p>
<h4 id="参考资料" tabindex="-1"> 参考资料：</h4>
<p>《代码整洁之道》</p>
<p>《阿里巴巴Java开发手册》</p>
<h2 id="公众号" tabindex="-1"> 公众号</h2>
<p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/12/01/c160f472e085489c98d8846a30c8da64" type="image/"/>
    </item>
    <item>
      <title>7000字+24张图带你彻底弄懂线程池</title>
      <link>https://newzone.top/nicearticle/art05.html</link>
      <guid>https://newzone.top/nicearticle/art05.html</guid>
      <source url="https://newzone.top/rss.xml">7000字+24张图带你彻底弄懂线程池</source>
      <category>好文收集</category>
      <pubDate>Thu, 01 Dec 2022 12:20:21 GMT</pubDate>
      <content:encoded><![CDATA[<p>今天跟大家聊一聊无论是在工作中常用还是在面试中常问的线程池，通过画图的方式来彻底弄懂线程池的工作原理，以及在实际项目中该如何自定义适合业务的线程池。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/05dd952e123b4d2fb33fa4ff0d886d71" alt="img" loading="lazy"></p>
<h2 id="一、什么是线程池" tabindex="-1"> 一、什么是线程池</h2>
<p>线程池其实是一种池化的技术的实现，池化技术的核心思想其实就是实现资源的一个复用，避免资源的重复创建和销毁带来的性能开销。在线程池中，线程池可以管理一堆线程，让线程执行完任务之后不会进行销毁，而是继续去处理其它线程已经提交的任务。</p>
<p><strong>线程池的好处:</strong></p>
<ul>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统 的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
</ul>
<h2 id="二、线程池的构造" tabindex="-1"> 二、线程池的构造</h2>
<p>Java中主要是通过构建ThreadPoolExecutor来创建线程池的，接下来我们看一下线程池是如何构造出来的。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/941c90be3ca9491fb454dd328ea55936" alt="img" loading="lazy">线程池构造参数</p>
<ul>
<li>corePoolSize：线程池中用来工作的核心的线程数量。</li>
<li>maximumPoolSize：最大线程数，线程池允许创建的最大线程数。</li>
<li>keepAliveTime：超出 corePoolSize 后创建的线程存活时间或者是所有线程最大存活时间，取决于配置。</li>
<li>unit：keepAliveTime 的时间单位。</li>
<li>workQueue：任务队列，是一个阻塞队列，当线程数已达到核心线程数，会将任务存储在阻塞队列中。</li>
<li>threadFactory ：线程池内部创建线程所用的工厂。</li>
<li>handler：拒绝策略；当队列已满并且线程数量达到最大线程数量时，会调用该方法处理该任务。</li>
</ul>
<p>线程池的构造其实很简单，就是传入一堆参数，然后进行简单的赋值操作。</p>
<h2 id="三、线程池的运行原理" tabindex="-1"> 三、线程池的运行原理</h2>
<p>说完线程池的核心构造参数的意思，接下来就来画图讲解这些参数在线程池中是如何工作的。</p>
<p>线程池刚创建出来是什么样子呢，如下图</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/4b533a229a3e4e279535c83aa323aaec" alt="img" loading="lazy"></p>
<p>不错，刚创建出来的线程池中只有一个构造时传入的阻塞队列而已，此时里面并没有的任何线程，但是如果你想要在执行之前已经创建好核心线程数，可以调用prestartAllCoreThreads方法来实现，默认是没有线程的。</p>
<p>当有线程通过execute方法提交了一个任务，会发生什么呢？</p>
<p>提交任务的时候，其实会去进行任务的处理</p>
<p>首先会去判断当前线程池的线程数是否小于核心线程数，也就是线程池构造时传入的参数corePoolSize。</p>
<p>如果小于，那么就直接通过ThreadFactory创建一个线程来执行这个任务，如图</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/96ff2e10a5fc48be98ab9fb158f24b88" alt="img" loading="lazy"></p>
<p>当任务执行完之后，线程不会退出，而是会去从阻塞队列中获取任务，如下图</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/5521b1c8ae444f5a8bd3f36882e34dac" alt="img" loading="lazy"></p>
<p>接下来如果又提交了一个任务，也会按照上述的步骤，去判断是否小于核心线程数，如果小于，还是会创建线程来执行任务，执行完之后也会从阻塞队列中获取任务。这里有个细节，就是提交任务的时候，就算有线程池里的线程从阻塞队列中获取不到任务，如果线程池里的线程数还是小于核心线程数，那么依然会继续创建线程，而不是复用已有的线程。</p>
<p>如果线程池里的线程数不再小于核心线程数呢？那么此时就会尝试将任务放入阻塞队列中，入队成功之后，如图</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/9a802f44a71048e5994d42f5a8bd18b3" alt="img" loading="lazy"></p>
<p>这样在阻塞的线程就可以获取到任务了。</p>
<p>但是，随着任务越来越多，队列已经满了，任务放入失败了，那怎么办呢？</p>
<p>此时就会判断当前线程池里的线程数是否小于最大线程数，也就是入参时的maximumPoolSize参数</p>
<p>如果小于最大线程数，那么也会创建非核心线程来执行提交的任务，如图</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/638936a789a74a56b931dc3afb841c30" alt="img" loading="lazy"></p>
<p>所以，从这里可以发现，就算队列中有任务，新创建的线程还是优先处理这个提交的任务，而不是从队列中获取已有的任务执行，从这可以看出，先提交的任务不一定先执行。</p>
<p>但是不幸的事发生了，线程数已经达到了最大线程数量，那么此时会怎么办呢？</p>
<p>此时就会执行拒绝策略，也就是构造线程池的时候，传入的RejectedExecutionHandler对象，来处理这个任务。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/d9c556baef314dc883d139df121a0ad3" alt="img" loading="lazy"></p>
<p>RejectedExecutionHandler的实现JDK自带的默认有4种</p>
<ul>
<li>AbortPolicy：丢弃任务，抛出运行时异常</li>
<li>CallerRunsPolicy：由提交任务的线程来执行任务</li>
<li>DiscardPolicy：丢弃这个任务，但是不抛异常</li>
<li>DiscardOldestPolicy：从队列中剔除最先进入队列的任务，然后再次提交任务</li>
</ul>
<p>线程池创建的时候，如果不指定拒绝策略就默认是AbortPolicy策略。当然，你也可以自己实现RejectedExecutionHandler接口，比如将任务存在数据库或者缓存中，这样就数据库或者缓存中获取到被拒绝掉的任务了。</p>
<p>到这里，我们发现，线程池构造的几个参数corePoolSize、maximumPoolSize、workQueue、threadFactory、handler我们都在上述的执行过程中讲到了，那么还差两个参数keepAliveTime和unit(unit是keepAliveTime的时间单位)没讲到，所以keepAliveTime是如何起到作用的呢，这个问题留到后面分析。</p>
<p>说完整个执行的流程，接下来看看execute方法代码是如何实现的。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/643086cbd03f495e9ce93ed4ded64f23" alt="img" loading="lazy">execute方法</p>
<ul>
<li>workerCountOf(c)&lt;corePoolSize:这行代码就是判断是否小于核心线程数，是的话就通过addWorker方法，addWorker就是添加线程来执行任务。</li>
<li>workQueue.offer(command)：这行代码就表示尝试往阻塞队列中添加任务</li>
<li>添加失败之后就会再次调用addWorker方法尝试添加非核心线程来执行任务</li>
<li>如果还是添加非核心线程失败了，那么就会调用reject(command)来拒绝这个任务。</li>
</ul>
<p>最后再来另画一张图总结execute执行流程</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/7b229935cbf54091b5c7be5e6e0341b0" alt="img" loading="lazy"></p>
<h2 id="四、线程池中线程实现复用的原理" tabindex="-1"> 四、线程池中线程实现复用的原理</h2>
<p>线程池的核心功能就是实现了线程的重复利用，那么线程池是如何实现线程的复用呢？</p>
<p>线程在线程池内部其实是被封装成一个Worker对象</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/a2302c0aa190421fbc898d0ee98f66d9" alt="img" loading="lazy"></p>
<p>Worker继承了AQS，也就是有一定锁的特性。</p>
<p>创建线程来执行任务的方法上面提到是通过addWorker方法创建的。在创建Worker对象的时候，会把线程和任务一起封装到Worker内部，然后调用runWorker方法来让线程执行任务，接下来我们就来看一下runWorker方法。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/41bee0df535642c088162eb059caeab4" alt="img" loading="lazy">启动线程处理任务</p>
<p>从这张图可以看出线程执行完任务不会退出的原因，runWorker内部使用了while死循环，当第一个任务执行完之后，会不断地通过getTask方法获取任务，只要能获取到任务，就会调用run方法，继续执行任务，这就是线程能够复用的主要原因。</p>
<p>但是如果从getTask获取不到方法的时候，最后就会调用finally中的processWorkerExit方法，来将线程退出。</p>
<p>这里有个一个细节就是，因为Worker继承了AQS，每次在执行任务之前都会调用Worker的lock方法，执行完任务之后，会调用unlock方法，这样做的目的就可以通过Woker的加锁状态就能判断出当前线程是否正在运行任务。如果想知道线程是否正在运行任务，只需要调用Woker的tryLock方法，根据是否加锁成功就能判断，加锁成功说明当前线程没有加锁，也就没有执行任务了，在调用shutdown方法关闭线程池的时候，就用这种方式来判断线程有没有在执行任务，如果没有的话，来尝试打断没有执行任务的线程。</p>
<h2 id="五、线程是如何获取任务的以及如何实现超时的" tabindex="-1"> 五、线程是如何获取任务的以及如何实现超时的</h2>
<p>上一节我们说到，线程在执行完任务之后，会继续从getTask方法中获取任务，获取不到就会退出。接下来我们就来看一看getTask方法的实现。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/f764a67c24f14f43b975154b8c52ca2c" alt="img" loading="lazy">getTask方法</p>
<p>getTask方法，前面就是线程池的一些状态的判断，这里有一行代码</p>
<div data-ext="text"><pre><code>boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;
</code></pre><div aria-hidden="true"><div></div></div></div><p>这行代码是判断，当前过来获取任务的线程是否可以超时退出。如果allowCoreThreadTimeOut设置为true或者线程池当前的线程数大于核心线程数，也就是corePoolSize，那么该获取任务的线程就可以超时退出。</p>
<p>那是怎么做到超时退出呢，就是这行核心代码</p>
<div data-ext="text"><pre><code>Runnable r = timed ?
                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :
                    workQueue.take();
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>会根据是否允许超时来选择调用阻塞队列workQueue的poll方法或者take方法。如果允许超时，则会调用poll方法，传入keepAliveTime，也就是构造线程池时传入的空闲时间，这个方法的意思就是从队列中阻塞keepAliveTime时间来获取任务，获取不到就会返回null；如果不允许超时，就会调用take方法，这个方法会一直阻塞获取任务，直到从队列中获取到任务位置。从这里可以看到keepAliveTime是如何使用的了。</p>
<p>所以到这里应该就知道线程池中的线程为什么可以做到空闲一定时间就退出了吧。其实最主要的是利用了阻塞队列的poll方法的实现，这个方法可以指定超时时间，一旦线程达到了keepAliveTime还没有获取到任务，那么就会返回null，上一小节提到，getTask方法返回null，线程就会退出。</p>
<p>这里也有一个细节，就是判断当前获取任务的线程是否可以超时退出的时候，如果将allowCoreThreadTimeOut设置为true，那么所有线程走到这个timed都是true，那么所有的线程，包括核心线程都可以做到超时退出。如果你的线程池需要将核心线程超时退出，那么可以通过allowCoreThreadTimeOut方法将allowCoreThreadTimeOut变量设置为true。</p>
<p>整个getTask方法以及线程超时退出的机制如图所示</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/78fb77a27f384a7c981152db1bf164d7" alt="img" loading="lazy"></p>
<h2 id="六、线程池的5种状态" tabindex="-1"> 六、线程池的5种状态</h2>
<p>线程池内部有5个常量来代表线程池的五种状态</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/d208af3b25bc45d3ad67a3c12a95af1f" alt="img" loading="lazy"></p>
<ul>
<li>RUNNING：线程池创建时就是这个状态，能够接收新任务，以及对已添加的任务进行处理。</li>
<li>SHUTDOWN：调用shutdown方法线程池就会转换成SHUTDOWN状态，此时线程池不再接收新任务，但能继续处理已添加的任务到队列中任务。</li>
<li>STOP：调用shutdownNow方法线程池就会转换成STOP状态，不接收新任务，也不能继续处理已添加的任务到队列中任务，并且会尝试中断正在处理的任务的线程。</li>
<li>TIDYING：SHUTDOWN 状态下，任务数为 0， 其他所有任务已终止，线程池会变为 TIDYING 状态。线程池在 SHUTDOWN 状态，任务队列为空且执行中任务为空，线程池会变为 TIDYING 状态。线程池在 STOP 状态，线程池中执行中任务为空时，线程池会变为 TIDYING 状态。</li>
<li>TERMINATED：线程池彻底终止。线程池在 TIDYING 状态执行完 terminated() 方法就会转变为 TERMINATED 状态。</li>
</ul>
<p>线程池状态具体是存在ctl成员变量中，ctl中不仅存储了线程池的状态还存储了当前线程池中线程数的大小</p>
<div data-ext="text"><pre><code>private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
</code></pre><div aria-hidden="true"><div></div></div></div><p>最后画个图来总结一下这5种状态的流转</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/96dee8729183491c89aaf6df5d054574" alt="img" loading="lazy"></p>
<p>其实，在线程池运行过程中，绝大多数操作执行前都得判断当前线程池处于哪种状态，再来决定是否继续执行该操作。</p>
<h2 id="七、线程池的关闭" tabindex="-1"> 七、线程池的关闭</h2>
<p>线程池提供了shutdown和shutdownNow两个方法来关闭线程池。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/19b7e7a817c04076a3940f601104ee64" alt="img" loading="lazy">shutdown方法</p>
<p>就是将线程池的状态修改为SHUTDOWN，然后尝试打断空闲的线程（如何判断空闲，上面在说Worker继承AQS的时候说过），也就是在阻塞等待任务的线程。</p>
<p><img src="https://s1.vika.cn/space/2022/12/01/c6ccda00b0bc49b59582280bd3868e77" alt="img" loading="lazy">shutdownNow方法</p>
<p>就是将线程池的状态修改为STOP，然后尝试打断所有的线程，从阻塞队列中移除剩余的任务，这也是为什么shutdownNow不能执行剩余任务的原因。</p>
<p>所以也可以看出shutdown方法和shutdownNow方法的主要区别就是，shutdown之后还能处理在队列中的任务，shutdownNow直接就将任务从队列中移除，线程池里的线程就不再处理了。</p>
<h2 id="八、线程池的监控" tabindex="-1"> 八、线程池的监控</h2>
<p>在项目中使用线程池的时候，一般需要对线程池进行监控，方便出问题的时候进行查看。线程池本身提供了一些方法来获取线程池的运行状态。</p>
<ul>
<li>getCompletedTaskCount：已经执行完成的任务数量</li>
<li>getLargestPoolSize：线程池里曾经创建过的最大的线程数量。这个主要是用来判断线程是否满过。</li>
<li>getActiveCount：获取正在执行任务的线程数据</li>
<li>getPoolSize：获取当前线程池中线程数量的大小</li>
</ul>
<p>除了线程池提供的上述已经实现的方法，同时线程池也预留了很多扩展方法。比如在runWorker方法里面，在执行任务之前会回调beforeExecute方法，执行任务之后会回调afterExecute方法，而这些方法默认都是空实现，你可以自己继承ThreadPoolExecutor来扩展重写这些方法，来实现自己想要的功能。</p>
<h2 id="九、executors构建线程池以及问题分析" tabindex="-1"> 九、Executors构建线程池以及问题分析</h2>
<p>JDK内部提供了Executors这个工具类，来快速的创建线程池。</p>
<h5 id="固定线程数量的线程池-核心线程数与最大线程数相等" tabindex="-1"> 固定线程数量的线程池：核心线程数与最大线程数相等</h5>
<p><img src="https://s1.vika.cn/space/2022/12/01/38d6a9bdc19b4ae78fd7c0f5412ad7cf" alt="img" loading="lazy"></p>
<h5 id="单个线程数量的线程池" tabindex="-1"> 单个线程数量的线程池</h5>
<p><img src="https://s1.vika.cn/space/2022/12/01/917da4ec4fd648439bb6394ba21ab54b" alt="img" loading="lazy"></p>
<h5 id="接近无限大线程数量的线程池" tabindex="-1"> 接近无限大线程数量的线程池</h5>
<p><img src="https://s1.vika.cn/space/2022/12/01/085097a5cc4846528abd0cea6f75cae5" alt="img" loading="lazy"></p>
<h5 id="带定时调度功能的线程池" tabindex="-1"> 带定时调度功能的线程池</h5>
<p><img src="https://s1.vika.cn/space/2022/12/01/cf2cb715427c443f8f922752d358a28d" alt="img" loading="lazy"></p>
<p>虽然JDK提供了快速创建线程池的方法，但是其实不推荐使用Executors来创建线程池，因为从上面构造线程池可以看出，newFixedThreadPool线程池，由于使用了LinkedBlockingQueue，队列的容量默认是无限大，实际使用中出现任务过多时会导致内存溢出；newCachedThreadPool线程池由于核心线程数无限大，当任务过多的时候，会导致创建大量的线程，可能机器负载过高，可能会导致服务宕机。</p>
<h2 id="十、线程池的使用场景" tabindex="-1"> 十、线程池的使用场景</h2>
<p>在java程序中，其实经常需要用到多线程来处理一些业务，但是不建议单纯使用继承Thread或者实现Runnable接口的方式来创建线程，那样就会导致频繁创建及销毁线程，同时创建过多的线程也可能引发资源耗尽的风险。所以在这种情况下，使用线程池是一种更合理的选择，方便管理任务，实现了线程的重复利用。所以线程池一般适合那种需要异步或者多线程处理任务的场景。</p>
<h2 id="十一、实际项目中如何合理的自定义线程池" tabindex="-1"> 十一、实际项目中如何合理的自定义线程池</h2>
<p>通过上面分析提到，通过Executors这个工具类来创建的线程池其实都无法满足实际的使用场景，那么在实际的项目中，到底该如何构造线程池呢，该如何合理的设置参数？</p>
<p>1）线程数</p>
<p>线程数的设置主要取决于业务是IO密集型还是CPU密集型。</p>
<p>CPU密集型指的是任务主要使用来进行大量的计算，没有什么导致线程阻塞。一般这种场景的线程数设置为CPU核心数+1。</p>
<p>IO密集型：当执行任务需要大量的io，比如磁盘io，网络io，可能会存在大量的阻塞，所以在IO密集型任务中使用多线程可以大大地加速任务的处理。一般线程数设置为 2*CPU核心数</p>
<p>java中用来获取CPU核心数的方法是：</p>
<div data-ext="text"><pre><code>Runtime.getRuntime().availableProcessors();
</code></pre><div aria-hidden="true"><div></div></div></div><p>2）线程工厂</p>
<p>一般建议自定义线程工厂，构建线程的时候设置线程的名称，这样就在查日志的时候就方便知道是哪个线程执行的代码。</p>
<p>3）有界队列</p>
<p>一般需要设置有界队列的大小，比如LinkedBlockingQueue在构造的时候就可以传入参数，来限制队列中任务数据的大小，这样就不会因为无限往队列中扔任务导致系统的oom。</p>
<h2 id="公众号" tabindex="-1"> 公众号</h2>
<p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/12/01/05dd952e123b4d2fb33fa4ff0d886d71" type="image/"/>
    </item>
    <item>
      <title>再有人问你如何实现订单到期关闭，就把这篇文章发给他！</title>
      <link>https://newzone.top/nicearticle/art03.html</link>
      <guid>https://newzone.top/nicearticle/art03.html</guid>
      <source url="https://newzone.top/rss.xml">再有人问你如何实现订单到期关闭，就把这篇文章发给他！</source>
      <description>实现订单到期关闭的十一种正确姿势！</description>
      <category>好文收集</category>
      <pubDate>Tue, 29 Nov 2022 12:21:33 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>实现订单到期关闭的十一种正确姿势！</p>
</blockquote>
<p>在电商、支付等系统中，一般都是先创建订单（支付单），再给用户一定的时间进行支付，如果没有按时支付的话，就需要把之前的订单（支付单）取消掉。</p>
<p>这种类似的场景有很多，还有比如到期自动收货、超时自动退款、下单后自动发送短信等等都是类似的业务问题。</p>
<p>本文就从这样的业务问题出发，探讨一下都有哪些技术方案，这些方案的实现细节，以及相关的优缺点都有什么？</p>
<p>因为本文要讲的内容比较多，涉及到11种具体方案，受篇幅限制，<strong>这篇文章主要是讲方案，不会涉及到具体的代码实现。</strong> 因为只要方案搞清楚了，代码实现不是难事儿。</p>
<h3 id="一、被动关闭" tabindex="-1"> 一、被动关闭</h3>
<p>在解决这类问题的时候，有一种比较简单的方式，那就是通过业务上的被动方式来进行关单操作。</p>
<p>简单点说，就是订单创建好了之后。我们系统上不做主动关单，什么时候用户来访问这个订单了，再去判断时间是不是超过了过期时间，如果过了时间那就进行关单操作，然后再提示用户。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/5c9c1d8e9fa84005bc80ef961ae1b21d" alt="img" loading="lazy"></p>
<p>这种做法是最简单的，基本不需要开发定时关闭的功能，但是他的缺点也很明显，那就是如果用户一直不来查看这个订单，那么就会有很多脏数据冗余在数据库中一直无法被关单。</p>
<p>还有一个缺点，那就是需要在用户的查询过程中进行写的操作，一般写操作都会比读操作耗时更长，而且有失败的可能，一旦关单失败了，就会导致系统处理起来比较复杂。</p>
<p>所以，<strong>这种方案只适合于自己学习的时候用，任何商业网站中都不建议使用这种方案来实现订单关闭的功能。</strong></p>
<h3 id="二、定时任务" tabindex="-1"> 二、定时任务</h3>
<p>定时任务关闭订单，这是很容易想到的一种方案。</p>
<p>具体实现细节就是我们通过一些调度平台来实现定时执行任务，任务就是去扫描所有到期的订单，然后执行关单动作。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/3a3ce2a0029144acb1abdcb55e61f7ae" alt="img" loading="lazy"></p>
<p>这个方案的优点也是比较简单，实现起来很容易，基于Timer、ScheduledThreadPoolExecutor、或者像xxl-job这类调度框架都能实现，但是有以下几个问题：</p>
<p><strong>1、时间不精准。</strong> 一般定时任务基于固定的频率、按照时间定时执行的，那么就可能会发生很多订单已经到了超时时间，但是定时任务的调度时间还没到，那么就会导致这些订单的实际关闭时间要比应该关闭的时间晚一些。</p>
<p><strong>2、无法处理大订单量。</strong> 定时任务的方式是会把本来比较分散的关闭时间集中到任务调度的那一段时间，如果订单量比较大的话，那么就可能导致任务执行时间很长，整个任务的时间越长，订单被扫描到时间可能就很晚，那么就会导致关闭时间更晚。</p>
<p><strong>3、对数据库造成压力。</strong> 定时任务集中扫表，这会使得数据库IO在短时间内被大量占用和消耗，如果没有做好隔离，并且业务量比较大的话，就可能会影响到线上的正常业务。</p>
<p><strong>4、分库分表问题。</strong> 订单系统，一旦订单量大就可能会考虑分库分表，在分库分表中进行全表扫描，这是一个极不推荐的方案。</p>
<p>所以，<strong>定时任务的方案，适合于对时间精确度要求不高、并且业务量不是很大的场景中。如果对时间精度要求比较高，并且业务量很大的话，这种方案不适用。</strong></p>
<h3 id="三、jdk自带的延迟队列" tabindex="-1"> 三、JDK自带的延迟队列</h3>
<p>有这样一种方案，他不需要借助任何外部的资源，直接基于应用自身就能实现，那就是基于JDK自带的DelayQueue来实现</p>
<blockquote>
<p>DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走。</p>
</blockquote>
<p>基于延迟队列，是可以实现订单的延迟关闭的，首先，在用户创建订单的时候，把订单加入到DelayQueue中，然后，还需要一个常驻任务不断的从队列中取出那些到了超时时间的订单，然后在把他们进行关单，之后再从队列中删除掉。</p>
<p>这个方案需要有一个线程，不断的从队列中取出需要关单的订单。一般在这个线程中需要加一个while(true)循环，这样才能确保任务不断的执行并且能够及时的取出超时订单。</p>
<p>使用DelayQueue实现超时关单的方案，实现起来简单，不须要依赖第三方的框架和类库，JDK原生就支持了。</p>
<p>当然这个方案也不是没有缺点的，首先，基于DelayQueue的话，需要把订单放进去，那如果订单量太大的话，可能会导致OOM的问题；另外，DelayQueue是基于JVM内存的，一旦机器重启了，里面的数据就都没有了。虽然我们可以配合数据库的持久化一起使用。而且现在很多应用都是集群部署的，那么集群中多个实例上的多个DelayQueue如何配合是一个很大的问题。</p>
<p>所以，<strong>基于JDK的DelayQueue方案只适合在单机场景、并且数据量不大的场景中使用，如果涉及到分布式场景，那还是不建议使用。</strong></p>
<h3 id="四、netty的时间轮" tabindex="-1"> 四、Netty的时间轮</h3>
<p>还有一种方式，和上面我们提到的JDK自带的DelayQueue类似的方式，那就是基于时间轮实现。</p>
<p>为什么要有时间轮呢？主要是因为DelayQueue插入和删除操作的平均时间复杂度——O(nlog(n))，虽然已经挺好的了，但是时间轮的方案可以将插入和删除操作的时间复杂度都降为O(1)。</p>
<blockquote>
<p>时间轮可以理解为一种环形结构，像钟表一样被分为多个 slot。每个 slot 代表一个时间段，每个 slot 中可以存放多个任务，使用的是链表结构保存该时间段到期的所有任务。时间轮通过一个时针随着时间一个个 slot 转动，并执行 slot 中的所有到期任务。</p>
</blockquote>
<p><img src="https://s1.vika.cn/space/2022/11/29/ae6d3611ae01404fb7aed03323dfc375" alt="img" loading="lazy"></p>
<p>基于Netty的HashedWheelTimer可以帮助我们快速的实现一个时间轮，这种方式和DelayQueue类似，缺点都是基于内存、集群扩展麻烦、内存有限制等等。</p>
<p>但是他相比DelayQueue的话，效率更高一些，任务触发的延迟更低。代码实现上面也更加精简。</p>
<p>所以，<strong>基于Netty的时间轮方案比基于JDK的DelayQueue效率更高，实现起来更简单，但是同样的，只适合在单机场景、并且数据量不大的场景中使用，如果涉及到分布式场景，那还是不建议使用。</strong></p>
<h3 id="五、kafka的时间轮" tabindex="-1"> 五、Kafka的时间轮</h3>
<p>既然基于Netty的时间轮存在一些问题，那么有没有其他的时间轮的实现呢？</p>
<p>还真有的，那就是Kafka的时间轮，Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/2ef96cf9dc094d6aa745ef7faccbb882" alt="img" loading="lazy"></p>
<p>而且，为了解决有一些时间跨度大的延时任务，Kafka 还引入了层级时间轮，能更好控制时间粒度，可以应对更加复杂的定时任务处理场景；</p>
<p>Kafka 中的时间轮的实现是 TimingWheel 类，位于 kafka.utils.timer 包中。基于Kafka的时间轮同样可以得到O(1)时间复杂度，性能上还是不错的。</p>
<p><strong>基于Kafka的时间轮的实现方式，在实现方式上有点复杂，需要依赖kafka，但是他的稳定性和性能都要更高一些，而且适合用在分布式场景</strong>中。</p>
<h3 id="六、rocketmq延迟消息" tabindex="-1"> 六、RocketMQ延迟消息</h3>
<p>相比于Kafka来说，RocketMQ中有一个强大的功能，那就是支持延迟消息。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/499d6b9b435f416883ece2b5007b6928" alt="img" loading="lazy"></p>
<blockquote>
<p>延迟消息，当消息写入到Broker后，不会立刻被消费者消费，需要等待指定的时长后才可被消费处理的消息，称为延时消息。</p>
</blockquote>
<p>有了延迟消息，我们就可以在订单创建好之后，发送一个延迟消息，比如20分钟取消订单，那就发一个延迟20分钟的延迟消息，然后在20分钟之后，消息就会被消费者消费，消费者在接收到消息之后，去关单就行了。</p>
<p>但是，RocketMQ的延迟消息并不是支持任意时长的延迟的，它只支持：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h这几个时长。（商业版支持任意时长）</p>
<p>可以看到，有了RocketMQ延迟消息之后，我们处理上就简单很多，只需要发消息，和接收消息就行了，系统之间完全解耦了。但是因为延迟消息的时长受到了限制，所以并不是很灵活。</p>
<p><strong>如果我们的业务上，关单时长刚好和RocketMQ延迟消息支持的时长匹配的话，那么是可以基于RocketMQ延迟消息来实现的。否则，这种方式并不是最佳的。</strong></p>
<h3 id="七、rabbitmq死信队列" tabindex="-1"> 七、RabbitMQ死信队列</h3>
<p>延迟消息不仅在RocketMQ中支持，其实在RabbitMQ中也是可以实现的，只不过其底层是基于死信队列实现的。</p>
<p>当RabbitMQ中的一条正常的消息，因为过了存活时间（TTL过期）、队列长度超限、被消费者拒绝等原因无法被消费时，就会变成Dead Message，即死信。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/f8cd9da5ccac41c0abecdd9d5149febf" alt="img" loading="lazy"></p>
<p>当一个消息变成死信之后，他就能被重新发送到死信队列中（其实是交换机-exchange）。</p>
<p>那么基于这样的机制，就可以实现延迟消息了。那就是我们给一个消息设定TTL，然但是并不消费这个消息，等他过期，过期后就会进入到死信队列，然后我们再监听死信队列的消息消费就行了。</p>
<p>而且，RabbitMQ中的这个TTL是可以设置任意时长的，这就解决了RocketMQ的不灵活的问题。</p>
<p>但是，死信队列的实现方式存在一个问题，那就是可能造成队头阻塞，因为队列是先进先出的，而且每次只会判断队头的消息是否过期，那么，如果队头的消息时间很长，一直都不过期，那么就会阻塞整个队列，这时候即使排在他后面的消息过期了，那么也会被一直阻塞。</p>
<p><strong>基于RabbitMQ的死信队列，可以实现延迟消息，非常灵活的实现定时关单，并且借助RabbitMQ的集群扩展性，可以实现高可用，以及处理大并发量。他的缺点第一是可能存在消息阻塞的问题，还有就是方案比较复杂，不仅要依赖RabbitMQ，而且还需要声明很多队列(exchange)出来，增加系统的复杂度</strong></p>
<h3 id="八、rabbitmq插件" tabindex="-1"> 八、RabbitMQ插件</h3>
<p>其实，基于RabbitMQ的话，可以不用死信队列也能实现延迟消息，那就是基于rabbitmq_delayed_message_exchange插件，这种方案能够解决通过死信队列实现延迟消息出现的消息阻塞问题。但是该插件从RabbitMQ的3.6.12开始支持的，所以对版本有要求。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/b80ece1c64b14b2e88de9aac29f3f90a" alt="img" loading="lazy"></p>
<p>这个插件是官方出的，可以放心使用，安装并启用这个插件之后，就可以创建x-delayed-message类型的队列了。</p>
<p>前面我们提到的基于私信队列的方式，是消息先会投递到一个正常队列，在TTL过期后进入死信队列。但是基于插件的这种方式，消息并不会立即进入队列，而是先把他们保存在一个基于Erlang开发的Mnesia数据库中，然后通过一个定时器去查询需要被投递的消息，再把他们投递到x-delayed-message队列中。</p>
<p><strong>基于RabbitMQ插件的方式可以实现延迟消息，并且不存在消息阻塞的问题，但是因为是基于插件的，而这个插件支持的最大延长时间是(2^32)-1 毫秒，大约49天，超过这个时间就会被立即消费。但是他基于RabbitMQ实现，所以在可用性、性能方便都很不错</strong></p>
<h3 id="九、redis过期监听" tabindex="-1"> 九、Redis过期监听</h3>
<p>很多用过Redis的人都知道，Redis有一个过期监听的功能，</p>
<p>在 redis.conf 中，加入一条配置notify-keyspace-events Ex开启过期监听，然后再代码中实现一个KeyExpirationEventMessageListener，就可以监听key的过期消息了。</p>
<p>这样就可以在接收到过期消息的时候，进行订单的关单操作。</p>
<p><strong>这个方案不建议大家使用，是因为Redis官网上明确的说过，Redis并不保证Key在过期的时候就能被立即删除，更不保证这个消息能被立即发出。所以，消息延迟是必然存在的，随着数据量越大延迟越长，延迟个几分钟都是常事儿。</strong></p>
<p>而且，在Redis 5.0之前，<strong>这个消息是通过PUB/SUB模式发出的，他不会做持久化，至于你有没有接到，有没有消费成功，他不管。也就是说，如果发消息的时候，你的客户端挂了，之后再恢复的话，这个消息你就彻底丢失了。</strong>（在Redis 5.0之后，因为引入了Stream，是可以用来做延迟消息队列的。）</p>
<h3 id="十、redis的zset" tabindex="-1"> 十、Redis的zset</h3>
<p>虽然基于 Redis 过期监听的方案并不完美，但是并不是Redis实现关单功能就不完美了，还有其他的方案。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/70902d098dd04722b05d9246d140ce7c" alt="img" loading="lazy"></p>
<p>我们可以借助Redis中的有序集合——zset来实现这个功能。</p>
<p>zset是一个有序集合，每一个元素(member)都关联了一个 score，可以通过 score 排序来取集合中的值。</p>
<p>我们将订单超时时间的时间戳（下单时间+超时时长）与订单号分别设置为 score 和 member。这样redis会对zset按照score延时时间进行排序。然后我们再开启redis扫描任务，获取”当前时间 &gt; score”的延时任务，扫描到之后取出订单号，然后查询到订单进行关单操作即可。</p>
<p><strong>使用redis zset来实现订单关闭的功能的优点是可以借助redis的持久化、高可用机制。避免数据丢失。但是这个方案也有缺点，那就是在高并发场景中，有可能有多个消费者同时获取到同一个订单号，一般采用加分布式锁解决，但是这样做也会降低吞吐型。</strong></p>
<p>但是，在大多数业务场景下，如果幂等性做得好的，多个消费者取到同一个订单号也无妨。</p>
<h3 id="十一、redisson" tabindex="-1"> 十一、Redisson</h3>
<p>上面这种方案看上去还不错，但是需要我们自己基于zset这种数据结构编写代码，那么有没有什么更加友好的方式？</p>
<p>有的，那就是基于Redisson。</p>
<p>Redisson是一个在Redis的基础上实现的框架，它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。</p>
<p><img src="https://s1.vika.cn/space/2022/11/29/a059b2acd4754e7a8c7963de61adc448" alt="img" loading="lazy"></p>
<p>Redission中定义了分布式延迟队列RDelayedQueue，这是一种基于我们前面介绍过的zset结构实现的延时队列，它允许以指定的延迟时长将元素放到目标队列中。</p>
<p>其实就是在zset的基础上增加了一个基于内存的延迟队列。当我们要添加一个数据到延迟队列的时候，redission会把数据+超时时间放到zset中，并且起一个延时任务，当任务到期的时候，再去zset中把数据取出来，返回给客户端使用。</p>
<p>大致思路就是这样的，感兴趣的大家可以看一看RDelayedQueue的具体实现。</p>
<p><strong>基于Redisson的实现方式，是可以解决基于zset方案中的并发重复问题的，而且还能实现方式也比较简单，稳定性、性能都比较高</strong>。</p>
<h3 id="总结" tabindex="-1"> 总结</h3>
<p>我们介绍了11种实现订单定时关闭的方案，其中不同的方案各自都有优缺点，也各自适用于不同的场景中。那我们尝试着总结一下：</p>
<p><strong>实现的复杂度上（包含用到的****框架的依赖及部署）：</strong></p>
<p>Redission &gt; RabbitMQ插件 &gt; RabbitMQ死信队列 &gt; RocketMQ延迟消息 ≈ Redis的zset &gt; Redis过期监听 ≈ kafka时间轮 &gt; 定时任务 &gt; Netty的时间轮 &gt; JDK自带的DelayQueue &gt; 被动关闭</p>
<p><strong>方案的完整性：</strong></p>
<p>Redission ≈ RabbitMQ插件 &gt; kafka时间轮 &gt; Redis的zset ≈ RocketMQ延迟消息 ≈ RabbitMQ死信队列 &gt; Redis过期监听 &gt; 定时任务 &gt; Netty的时间轮 &gt; JDK自带的DelayQueue &gt; 被动关闭</p>
<p><strong>不同的场景中也适合不同的方案：</strong></p>
<ul>
<li>自己玩玩：被动关闭</li>
<li>单体应用，业务量不大：Netty的时间轮、JDK自带的DelayQueue、定时任务</li>
<li>分布式应用，业务量不大：Redis过期监听、RabbitMQ死信队列、Redis的zset、定时任务</li>
<li>分布式应用，业务量大、并发高：Redission、RabbitMQ插件、kafka时间轮、RocketMQ延迟消息</li>
</ul>
<p>总体考虑的话，考虑到成本，方案完整性、以及方案的复杂度，还有用到的第三方框架的流行度来说，<strong>个人比较建议优先考虑Redission+Redis、RabbitMQ插件、Redis的zset、RocketMQ延迟消息等方案。</strong></p>
<h2 id="公众号" tabindex="-1"> 公众号</h2>
<p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/11/29/5c9c1d8e9fa84005bc80ef961ae1b21d" type="image/"/>
    </item>
    <item>
      <title>三数之和</title>
      <link>https://newzone.top/algorithm/array/threeSum.html</link>
      <guid>https://newzone.top/algorithm/array/threeSum.html</guid>
      <source url="https://newzone.top/rss.xml">三数之和</source>
      <category>算法指南</category>
      <pubDate>Sun, 27 Nov 2022 09:52:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>力扣链接：<a href="https://leetcode.cn/problems/3sum/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/3sum/</a></p>
</blockquote>
<h2 id="题目说明" tabindex="-1"> 题目说明</h2>
<p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<h2 id="示例" tabindex="-1"> 示例</h2>
<div data-ext="text"><pre><code>给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="分析" tabindex="-1"> 分析</h2>
<p>这个问题比起两数之和来，显然要复杂了一些，而且由于结果可能有多种情况，还要考虑去重，整体难度提升了不少。</p>
<p>最后的返回，就不再是一个简单的数组了，而是“数组的数组”，每一组解都是一个数组，最终有多组解都要返回。</p>
<h2 id="题解" tabindex="-1"> 题解</h2>
<h3 id="方法一-暴力法" tabindex="-1"> 方法一：暴力法</h3>
<p>最简单的办法，当然还是暴力法。基本思路是，每个人都先去找到另一个人，然后再一起逐个去找第三个人。</p>
<p>很容易想到，实现起来就是三重循环：这个时间复杂度是 O(n^3)。</p>
<p>代码如下：</p>
<div data-ext="java"><pre><code><span>// 方法一：暴力法</span>
<span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>threeSum1</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>)</span> <span>{</span>
    <span>// 定义结果列表</span>
    <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> result <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
    <span>int</span> n <span>=</span> nums<span>.</span>length<span>;</span>
    <span>// 三重 for 循环，枚举所有的三数集合</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n <span>-</span> <span>2</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>for</span> <span>(</span><span>int</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> n <span>-</span> <span>1</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
            <span>for</span> <span>(</span><span>int</span> k <span>=</span> j <span>+</span> <span>1</span><span>;</span> k <span>&lt;</span> n<span>;</span> k<span>++</span><span>)</span> <span>{</span>
                <span>if</span> <span>(</span>nums<span>[</span>i<span>]</span> <span>+</span> nums<span>[</span>j<span>]</span> <span>+</span> nums<span>[</span>k<span>]</span> <span>==</span> <span>0</span><span>)</span> <span>{</span>
                    result<span>.</span><span>add</span><span>(</span><span>Arrays</span><span>.</span><span>asList</span><span>(</span>nums<span>[</span>i<span>]</span><span>,</span> nums<span>[</span>j<span>]</span><span>,</span> nums<span>[</span>k<span>]</span><span>)</span><span>)</span><span>;</span>
                <span>}</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>运行一下，我们会发现，这个结果其实是不正确的没有去重，同样的三元组在结果中无法排除。比如 -1，0，1 会出现两次。而且时间复杂度非常高，是 N^3。</p>
<p>所以接下来，我们就要做一些改进，试图降低时间复杂度，而且解决去重问题。</p>
<h3 id="方法二-暴力法的改进-结果去重" tabindex="-1"> 方法二：暴力法的改进：结果去重</h3>
<p>要做去重，自然首先想到的，就是把结果保存到一张hash表里。仿照两数之和，直接存到 HashMap 里查找。</p>
<p>代码如下：</p>
<div data-ext="java"><pre><code><span>// 方法二：使用哈希表保存结果</span>
<span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>threeSum2</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>)</span> <span>{</span>
    <span>int</span> n <span>=</span> nums<span>.</span>length<span>;</span>
    <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> result <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>// 定义一个 hashMap</span>
    <span>Map</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>// 遍历数组，寻找每个数对应的那二个数</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>int</span> thatNum <span>=</span> <span>0</span> <span>-</span> nums<span>[</span>i<span>]</span><span>;</span>
        <span>if</span> <span>(</span>map<span>.</span><span>containsKey</span><span>(</span>thatNum<span>)</span><span>)</span> <span>{</span>
            <span>// 如果已经存在thatNum，就找到了一组解</span>
            <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> temList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span>map<span>.</span><span>get</span><span>(</span>thatNum<span>)</span><span>)</span><span>;</span>
            temList<span>.</span><span>add</span><span>(</span>nums<span>[</span>i<span>]</span><span>)</span><span>;</span> <span>// 添加另一个数</span>
            result<span>.</span><span>add</span><span>(</span>temList<span>)</span><span>;</span>
        <span>}</span>
        <span>// 把当前数对应的两数组合都保存到 map 里</span>
        <span>for</span> <span>(</span><span>int</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> i<span>;</span> j<span>++</span><span>)</span> <span>{</span>
            <span>// 以两数之和作为 key</span>
            <span>int</span> newKey <span>=</span> nums<span>[</span>i<span>]</span> <span>+</span> nums<span>[</span>j<span>]</span><span>;</span>
            <span>// 如果 key 不存在，则添加</span>
            <span>if</span> <span>(</span><span>!</span>map<span>.</span><span>containsKey</span><span>(</span>newKey<span>)</span><span>)</span> <span>{</span>
                <span>List</span><span><span>&lt;</span><span>Integer</span><span>></span></span> tempList <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>
                tempList<span>.</span><span>add</span><span>(</span>nums<span>[</span>i<span>]</span><span>)</span><span>;</span>
                tempList<span>.</span><span>add</span><span>(</span>nums<span>[</span>j<span>]</span><span>)</span><span>;</span>
                map<span>.</span><span>put</span><span>(</span>newKey<span>,</span> tempList<span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>时间复杂度降为 N^2，空间复杂度 O(N)。</p>
<p>但是，我们加一个输入[0,0,0,0]，会发现 结果不正确。</p>
<p>因为尽管通过 HashMap 存储可以去掉相同二元组的计算结果的值，但没有去掉重复的输出（三元组）。这就导致，0 对应在 HashMap 中有一个值（0，List（0，0）），第三个 0 来了会输出一次，第四个 0 来了又会输出一次。</p>
<p>如果希望解决这个问题，那就需要继续加入其它的判断来做去重，整个代码复杂度会变得更高。</p>
<h3 id="方法三-双指针法" tabindex="-1"> 方法三：双指针法</h3>
<p>暴力法搜索时间复杂度为 O(N^3)，要进行优化，可通过双指针动态消去无效解来提高效率。</p>
<p>双指针的思路，又分为左右指针和快慢指针两种。</p>
<p>我们这里用的是左右指针。左右指针，其实借鉴的就是分治的思想，简单来说，就是在数组头尾各放置一个指针，先让头部的指针（左指针）右移，移不动的时候，再让尾部的指针（右指针）左移：最终两个指针相遇，那么搜索就结束了。</p>
<hr>
<p><strong>1. 双指针法铺垫：先将给定 nums 排序，复杂度为 O(NlogN)</strong></p>
<p>首先，我们可以想到，数字求和，其实跟每个数的大小是有关系的，如果能先将数组排序，那后面肯定会容易很多。</p>
<p>之前我们搜索数组，时间复杂度至少都为 O(N^2)，而如果用快排或者归并，排序的复杂度，是 O(NlogN)，最多也是 O(N^2)。所以增加一步排序，不会导致整体时间复杂度上升。</p>
<p><img src="https://s1.vika.cn/space/2022/11/27/f5368caa5e2a4a3197f59a9f2d72cfd8" alt="image-20221127165759738" loading="lazy"></p>
<p>下面我们通过图解，来看一下具体的操作过程。</p>
<p><strong>2. 初始状态，定义左右指针 L 和 R，并以指针 i 遍历数组元素</strong></p>
<p><img src="https://s1.vika.cn/space/2022/11/27/b8c9c42c64d64f72a06eec5a281906e7" alt="image-20221127170408445" loading="lazy"></p>
<p>固定 3 个指针中最左（最小）数字的指针 i，双指针 L，R 分设在数组索引 (i,len(nums)) 两端，所以初始值，i = 0；L= i + 1；R = nums.length - 1</p>
<p>通过 L、R 双指针交替向中间移动，记录对于每个固定指针 i 的所有满足 nums[i] + nums[L] + nums[R] == 0 的 L，R 组合。</p>
<p><strong>两个基本原则：</strong></p>
<ul>
<li>当 nums[i] &gt; 0 时直接 break 跳出：因为 nums[R] &gt;= nums[L] &gt;= nums[i] &gt; 0，即 3 个数字都大于 0 ，在此固定指针 i 之后不可能再找到结果了。</li>
<li>当 i &gt; 0 且 nums[i] == nums[i - 1]时，即遇到重复元素时，跳过此元素 nums[i]：因为已经将 nums[i - 1] 的所有组合加入到结果中，本次双指针搜索只会得到重复组合。</li>
</ul>
<p><strong>3. 固定 i，判断 sum，然后移动左右指针 L 和 R</strong></p>
<p>L，R 分设在数组索引 (i, len(nums)) 两端，当L &lt; R 时循环计算当前三数之和：</p>
<p>sum = nums[i] + nums[L] + nums[R]</p>
<p>并按照以下规则执行双指针移动：</p>
<ul>
<li>当 sum &lt; 0 时，L ++ 并跳过所有重复的 nums[L]；</li>
</ul>
<p><img src="https://s1.vika.cn/space/2022/11/27/5ba61958c37948b08a2964fc0697c58b" alt="image-20221127171006963" loading="lazy"></p>
<p><img src="https://s1.vika.cn/space/2022/11/27/25f9d9ae8ae54b36b3c2cbbae9304de3" alt="image-20221127171011973" loading="lazy"></p>
<ul>
<li>由于 sum &lt; 0，L 一直右移，直到跟 R 重合。如果依然没有结果，那么 i++，换下一个数考虑。换下一个数，i++，继续移动双指针：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2022/11/27/d9e5d49b9b9b4d21bb8180a232448b70" alt="image-20221127171135972" loading="lazy"></p>
<p>初始同样还是 L = i + 1，R = nums.length - 1。同样，继续判断 sum。</p>
<ul>
<li>找到一组解之后，继续移动 L 和 R，判断 sum，如果小于 0 就右移 L，如果大于 0 就左移 R：</li>
</ul>
<p><img src="https://s1.vika.cn/space/2022/11/27/cbc7224eb94d409d9b095994d89c1fa9" alt="image-20221127171235192" loading="lazy"></p>
<p>找到一组解 [-1,-1,2]，保存，并继续右移 L。判断 sum，如果这时 sum = -1+0+2 &gt; 0，（R还没变，还是 5 ），那么就让 L 停下，开始左移 R。</p>
<ul>
<li>一直移动，又找到一组解</li>
</ul>
<p><img src="https://s1.vika.cn/space/2022/11/27/f50760e9250f4d0081c38f10b137e8dd" alt="image-20221127171614798" loading="lazy"></p>
<ul>
<li>如果 L 和 R 相遇或者L &gt; R，代表当前 i 已经排查完毕，i++；如果 i 指向的数跟 i - 1 一样，那么直接继续i++，考察下一个数;</li>
</ul>
<p>重复以上操作，直到 nums[i] &gt; 0，break 跳出，过程结束</p>
<p><strong>代码实现如下：</strong></p>
<div data-ext="java"><pre><code><span>// 方法三：双指针法</span>
<span>public</span> <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> <span>threeSum3</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>)</span> <span>{</span>
    <span>int</span> n <span>=</span> nums<span>.</span>length<span>;</span>
    <span>List</span><span><span>&lt;</span><span>List</span><span>&lt;</span><span>Integer</span><span>></span><span>></span></span> result <span>=</span> <span>new</span> <span>ArrayList</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>// 0.先对数组排序</span>
    <span>Arrays</span><span>.</span><span>sort</span><span>(</span>nums<span>)</span><span>;</span>

    <span>// 1.遍历每一个元素，作为当前三元组中最小的那个（最矮个做核心）</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>// 1.1 如果当前数已经大于0，直接退出循环</span>
        <span>if</span> <span>(</span>nums<span>[</span>i<span>]</span> <span>></span> <span>0</span><span>)</span> <span>{</span>
            <span>break</span><span>;</span>
        <span>}</span>
        <span>// 1.2 如果当前数据已经出现过，直接跳过(去重)</span>
        <span>if</span> <span>(</span>i <span>></span> <span>0</span> <span>&amp;&amp;</span> nums<span>[</span>i<span>]</span> <span>==</span> nums<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
            <span>continue</span><span>;</span>
        <span>}</span>
        <span>// 1.3 常规情况，以当前数作为最小数，定义左右指针</span>
        <span>int</span> lp <span>=</span> i <span>+</span> <span>1</span><span>;</span>
        <span>int</span> rp <span>=</span> n <span>-</span> <span>1</span><span>;</span>
        <span>// 只要左右指针不重叠，就继续移动指针</span>
        <span>while</span> <span>(</span>lp <span>&lt;</span> rp<span>)</span> <span>{</span>
            <span>int</span> sum <span>=</span> nums<span>[</span>i<span>]</span> <span>+</span> nums<span>[</span>lp<span>]</span> <span>+</span> nums<span>[</span>rp<span>]</span><span>;</span>
            <span>// 判断 sum 与0做大小对比</span>
            <span>if</span> <span>(</span>sum <span>==</span> <span>0</span><span>)</span> <span>{</span>
                <span>// 1.3.1 找到了一组解</span>
                result<span>.</span><span>add</span><span>(</span><span>Arrays</span><span>.</span><span>asList</span><span>(</span>nums<span>[</span>i<span>]</span><span>,</span> nums<span>[</span>lp<span>]</span><span>,</span> nums<span>[</span>rp<span>]</span><span>)</span><span>)</span><span>;</span>
                lp<span>++</span><span>;</span>
                rp<span>--</span><span>;</span>
                <span>// 如果移动之后的元素相同，直接跳过(去重)</span>
                <span>while</span> <span>(</span>lp <span>&lt;</span> rp <span>&amp;&amp;</span> nums<span>[</span>lp<span>]</span> <span>==</span> nums<span>[</span>lp <span>-</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                    lp<span>++</span><span>;</span>
                <span>}</span>
                <span>while</span> <span>(</span>lp <span>&lt;</span> rp <span>&amp;&amp;</span> nums<span>[</span>rp<span>]</span> <span>==</span> nums<span>[</span>rp <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
                    rp<span>--</span><span>;</span>
                <span>}</span>
            <span>}</span> <span>else</span> <span>if</span> <span>(</span>sum <span>&lt;</span> <span>0</span><span>)</span> <span>{</span> <span>//1.3.2 小于0，较小的数增大，左指针右移</span>
                lp<span>++</span><span>;</span>
            <span>}</span> <span>else</span> <span>{</span>  <span>//1.3.3 大于0，较小的数减小，右指针左移</span>
                rp<span>--</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>return</span> result<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>复杂度分析：</p>
<ul>
<li>
<p>时间复杂度 O(N^2)：其中固定指针k循环复杂度 O(N)，双指针 i，j 复杂度 O(N)。比暴力法的 O(n^3)，显然有了很大的改善。</p>
</li>
<li>
<p>空间复杂度 O(1)：指针使用常数大小的额外空间。</p>
</li>
</ul>
<h2 id="总结" tabindex="-1"> 总结</h2>
<div>
<p>收获</p>
<p>尽管时间复杂度依然为 O(n^2)，但是过程中避免了复杂的数据结构，空间复杂度仅为常数级O(1)，可以说，双指针法是一种很巧妙、很优雅的算法设计。</p>
</div>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/11/27/f5368caa5e2a4a3197f59a9f2d72cfd8" type="image/"/>
    </item>
    <item>
      <title>两数之和</title>
      <link>https://newzone.top/algorithm/array/twoSum.html</link>
      <guid>https://newzone.top/algorithm/array/twoSum.html</guid>
      <source url="https://newzone.top/rss.xml">两数之和</source>
      <category>算法指南</category>
      <pubDate>Sun, 27 Nov 2022 09:52:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>力扣链接：<a href="https://leetcode.cn/problems/two-sum/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/two-sum/</a></p>
</blockquote>
<h2 id="题目说明" tabindex="-1"> 题目说明</h2>
<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h2 id="示例" tabindex="-1"> 示例</h2>
<div data-ext="java"><pre><code>输入：nums <span>=</span> <span>[</span><span>2</span><span>,</span><span>7</span><span>,</span><span>11</span><span>,</span><span>15</span><span>]</span><span>,</span> target <span>=</span> <span>9</span>
输出：<span>[</span><span>0</span><span>,</span><span>1</span><span>]</span>
解释：因为 nums<span>[</span><span>0</span><span>]</span> <span>+</span> nums<span>[</span><span>1</span><span>]</span> <span>==</span> <span>9</span> ，返回 <span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h2 id="题解" tabindex="-1"> 题解</h2>
<h3 id="方法一-暴力法-穷举所有两数组合" tabindex="-1"> 方法一：暴力法：穷举所有两数组合</h3>
<div data-ext="java"><pre><code><span>// 方法一：暴力法：穷举所有两数组合</span>
<span>public</span> <span>int</span><span>[</span><span>]</span> <span>twoSum1</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
    <span>// 双重 for 循环</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> nums<span>.</span>length <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>for</span> <span>(</span><span>int</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> nums<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>nums<span>[</span>i<span>]</span> <span>+</span> nums<span>[</span>j<span>]</span> <span>==</span> target<span>)</span> <span>{</span>
                <span>return</span> <span>new</span> <span>int</span><span>[</span><span>]</span><span>{</span>i<span>,</span> j<span>}</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
    <span>// 如果找不到，抛出异常</span>
    <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span><span>"no solution"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="方法二-使用-hashmap" tabindex="-1"> 方法二：使用 HashMap</h3>
<div data-ext="java"><pre><code><span>public</span> <span>int</span><span>[</span><span>]</span> <span>twoSum3</span><span>(</span><span>int</span><span>[</span><span>]</span> nums<span>,</span> <span>int</span> target<span>)</span> <span>{</span>
    <span>// 定义一个哈希表</span>
    <span>Map</span><span><span>&lt;</span><span>Integer</span><span>,</span> <span>Integer</span><span>></span></span> map <span>=</span> <span>new</span> <span>HashMap</span><span><span>&lt;</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    <span>// 遍历数组，寻找每个数对应的那个数是否存在（只向前寻找）</span>
    <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> nums<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
        <span>int</span> thatNum <span>=</span> target <span>-</span> nums<span>[</span>i<span>]</span><span>;</span>
        <span>// 如果那个数存在，并且不是当前数自身，就直接返回结果</span>
        <span>if</span> <span>(</span>map<span>.</span><span>containsKey</span><span>(</span>thatNum<span>)</span><span>)</span> <span>{</span>
            <span>return</span> <span>new</span> <span>int</span><span>[</span><span>]</span><span>{</span>map<span>.</span><span>get</span><span>(</span>thatNum<span>)</span><span>,</span> i<span>}</span><span>;</span>
        <span>}</span>
        map<span>.</span><span>put</span><span>(</span>nums<span>[</span>i<span>]</span><span>,</span> i<span>)</span><span>;</span>
    <span>}</span>
    <span>// 如果找不到，抛出异常</span>
    <span>throw</span> <span>new</span> <span>IllegalArgumentException</span><span>(</span><span>"no solution"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>
<p>大致思路</p>
<p>首先定义一个 HashMap，在 key 中存储的是当前数组的每个元素值，value 存储的是元素所在的索引下标，遍历数组，先求每个值匹配的值 thatNum，之后再判断 HashMap 中是否存在该值，若存在，则直接返回两个数对应的索引值（因为题目中已明确说明只有一个解，所以无需再求解）；若循环结束后还没有找到结果，则直接抛出参数错误异常。</p>
</div>
<h2 id="总结" tabindex="-1"> 总结</h2>
<p>灵活的使用了一个重要的数据结构 — hash 表，利用 java 给我们提供的 HashMap ，通过 <code>map.containsKey()</code> 快速的寻找对应的数。</p>
]]></content:encoded>
    </item>
    <item>
      <title>好的架构是进化来的，不是设计来的！</title>
      <link>https://newzone.top/nicearticle/art01.html</link>
      <guid>https://newzone.top/nicearticle/art01.html</guid>
      <source url="https://newzone.top/rss.xml">好的架构是进化来的，不是设计来的！</source>
      <description>很多年前，读了子柳老师的《淘宝技术这十年》。这本书成为了我的架构启蒙书，书中的一句话像种子一样深埋在我的脑海里：“好的架构是进化来的，不是设计来的”。</description>
      <category>好文收集</category>
      <pubDate>Sat, 26 Nov 2022 12:36:29 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>很多年前，读了子柳老师的《淘宝技术这十年》。这本书成为了我的架构启蒙书，书中的一句话像种子一样深埋在我的脑海里：“好的架构是进化来的，不是设计来的”。</p>
<p>2015年，我加入神州专车订单研发团队，亲历了专车数据层「架构进化」的过程。这次工作经历对我而言非常有启发性，也让我经常感慨：“好的架构果然是一点点进化来的”。</p>
</blockquote>
<p><img src="https://s1.vika.cn/space/2022/11/26/63a1ed837bf44be887aa699f19fe0fe5" alt="img" loading="lazy"></p>
<h2 id="_1-单数据库架构" tabindex="-1"> 1 单数据库架构</h2>
<p>产品初期，技术团队的核心目标是：<strong>“快速实现产品需求，尽早对外提供服务”</strong>。</p>
<p>彼时的专车服务都连同一个 SQLServer 数据库，服务层已经按照业务领域做了一定程度的拆分。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/e80c72d643224e699db9e30a343f0219" alt="img" loading="lazy"></p>
<p>这种架构非常简单，团队可以分开协作，效率也极高。随着专车订单量的不断增长，早晚高峰期，用户需要打车的时候，点击下单后经常无响应。</p>
<p>系统层面来看：</p>
<ol>
<li>数据库瓶颈显现。频繁的磁盘操作导致数据库服务器 IO 消耗增加，同时多表关联，排序，分组，非索引字段条件查询也会让 cpu 飙升，最终都会导致数据库连接数激增；</li>
<li>网关大规模超时。在高并发场景下，大量请求直接操作数据库，数据库连接资源不够用，大量请求处于阻塞状态。</li>
</ol>
<h2 id="_2-sql优化和读写分离" tabindex="-1"> 2  SQL优化和读写分离</h2>
<p>为了缓解主数据库的压力，很容易就想到的策略：<strong>SQL优化</strong>。通过性能监控平台和 DBA 同学协作分析出业务慢 SQL ，整理出优化方案：</p>
<ol>
<li>合理添加索引；</li>
<li>减少多表 JOIN 关联，通过程序组装，减少数据库读压力；</li>
<li>减少大事务，尽快释放数据库连接。</li>
</ol>
<p>另外一个策略是：<strong>读写分离</strong>。</p>
<p>读写分离的基本原理是让主数据库处理事务性增、改、删操作（ INSERT、UPDATE、DELETE），而从数据库处理 SELECT 查询操作。</p>
<p>专车架构团队提供的<strong>框架</strong>中，支持读写分离，于是数据层架构进化为如下图：</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/2f5ba820c2354f99a978655a811590a2" alt="img" loading="lazy"></p>
<p>读写分离可以减少主库写压力，同时读从库可水平扩展。当然，读写分离依然有局限性：</p>
<ol>
<li>读写分离可能面临主从延迟的问题，订单服务载客流程中对实时性要求较高，因为担心延迟问题，大量操作依然使用主库查询；</li>
<li>读写分离可以缓解读压力，但是写操作的压力随着业务爆发式的增长并没有很有效的缓解。</li>
</ol>
<h2 id="_3-业务领域分库" tabindex="-1"> 3  业务领域分库</h2>
<p>虽然应用层面做了优化，数据层也做了读写分离，但主库的压力依然很大。接下来，大家不约而同的想到了<strong>业务领域分库</strong>，也就是：将数据库按业务领域拆分成不同的业务数据库，每个系统仅访问对应业务的数据库。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/ba0e0e5be41d4c6f88b3f7b618caabf4" alt="img" loading="lazy"></p>
<p>业务领域分库可以缓解核心订单库的性能压力，同时也减少系统间的相互影响，提升了系统整体稳定性。</p>
<p>随之而来的问题是：原来单一数据库时，简单的使用 JOIN 就可以满足需求，但拆分后的业务数据库在不同的实例上，就不能跨库使用 JOIN了，因此需要对<strong>系统边界重新梳理，业务系统也需要重构</strong> 。</p>
<p>重构重点包含两个部分：</p>
<ol>
<li>原来需要 JOIN 关联的查询修改成 <strong>RPC</strong> 调用，程序中组装数据 ；</li>
<li>业务表适当冗余字段，通过消息队列或者异构工具同步。</li>
</ol>
<h2 id="_4-缓存和mq" tabindex="-1"> 4 缓存和MQ</h2>
<p>专车服务中，订单服务是并发量和请求量最高，也是业务中最核心的服务。虽然通过业务领域分库，SQL 优化提升了不少系统性能，但订单数据库的写压力依然很大，系统的瓶颈依然很明显。</p>
<p>于是，订单服务引入了 <strong>缓存</strong> 和 <strong>MQ</strong> 。</p>
<p>乘客在用户端点击<strong>立即叫车</strong>，订单服务创建订单，首先保存到数据库后，然后将订单信息同步保存到缓存中。</p>
<p>在订单的载客生命周期里，订单的修改操作先修改缓存，然后发送消息到 <strong>MetaQ</strong> ，订单落盘服务消费消息，并判断订单信息是否正常（比如有无乱序)，若订单数据无误，则存储到数据库中。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/14620dd797724291a628b5959d58b5c4" alt="img" loading="lazy"></p>
<p>核心逻辑有两点：</p>
<ol>
<li>缓存集群中存储最近七天订单详情信息，大量订单读请求直接从缓存获取；</li>
<li>在订单的载客生命周期里，写操作先修改缓存，通过消息队列异步落盘，这样消息队列可以起到消峰的作用，同样可以降低数据库的压力。</li>
</ol>
<p>这次优化提升了订单服务的整体性能，也为后来订单服务库分库分表以及异构打下了坚实的基础。</p>
<h2 id="_5-从-sqlserver-到-mysql" tabindex="-1"> 5 从 SQLServer 到 MySQL</h2>
<p>业务依然在爆炸增长，每天几十万订单，订单表数据量很快将过亿，数据库天花板迟早会触及。</p>
<p>订单<strong>分库分表</strong>已成为技术团队的共识。业界很多分库分表方案都是基于 MySQL 数据库，专车技术管理层决定先将订单库整体先从 SQLServer 迁移到 MySQL 。</p>
<p>迁移之前，<strong>准备工作</strong>很重要 ：</p>
<ol>
<li>SQLServer 和 MySQL 两种数据库语法有一些差异，订单服务必须要适配 MySQL 语法。</li>
<li>订单 <strong>order_id</strong> 是主键自增，但在分布式场景中并不合适，需要将订单 id 调整为分布式模式。</li>
</ol>
<p>当准备工作完成后，才开始迁移。</p>
<p>迁移过程分两部分：<strong>历史全量数据迁移</strong> 和 <strong>增量数据迁移</strong>。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/7642b612cc604b8b9e5658e0d578320f" alt="img" loading="lazy"></p>
<p>历史数据全量迁移主要是 DBA 同学通过工具将订单库同步到独立的 MySQL 数据库。</p>
<p>增量数据迁移：因为 SQLServer 无 binlog 日志概念，不能使用 maxwell 和 canal 等类似解决方案。订单团队重构了订单服务代码，每次订单写操作的时候，会发送一条 MQ 消息到 MetaQ 。为了确保迁移的可靠性，还需要将新库的数据同步到旧库，也就是需要做到<strong>双向同步</strong> 。</p>
<p>迁移流程：</p>
<ol>
<li>首先订单服务（SQLServer版）发送订单变更消息到 MetaQ ，此时并不开启「旧库消息消费」，让消息先堆积在 MetaQ 里；</li>
<li>然后开始迁移历史全量数据，当全量迁移完成后，再开启「旧库消息消费」，这样新订单库就可以和旧订单库数据保持同步了；</li>
<li>开启「新库消息消费」，然后部署订单服务（ MySQL 版），此时订单服务有两个版本同时运行，检测数据无误后，逐步增加新订单服务流量，直到老订单服务完全下线。</li>
</ol>
<h2 id="_6-自研分库分表组件" tabindex="-1"> 6 自研分库分表组件</h2>
<p>业界分库分表一般有 proxy 和 client 两种流派。</p>
<h3 id="proxy模式" tabindex="-1"> proxy模式</h3>
<p><img src="https://s1.vika.cn/space/2022/11/26/94450871b1a949efb2e73c3c36949896" alt="img" loading="lazy"></p>
<p>代理层分片方案业界有 <strong>Mycat</strong> ，<strong>cobar</strong> 等 。</p>
<p>它的优点：应用零改动，和语言无关，可以通过连接共享减少连接数消耗。缺点：因为是代理层，存在额外的时延。</p>
<h3 id="client模式" tabindex="-1"> client模式</h3>
<p><img src="https://s1.vika.cn/space/2022/11/26/1f831bc1fd674c9ca93e5e3b3b9d9802" alt="img" loading="lazy"></p>
<p>应用层分片方案业界有 <strong>sharding-jdbc</strong> ，<strong>TDDL</strong> 等。</p>
<p>它的优点：直连数据库，额外开销小，实现简单，轻量级中间件。缺点：无法减少连接数消耗，有一定的侵入性，多数只支持Java语言。</p>
<p>神州架构团队选择<strong>自研</strong>分库分表组件，采用了 <strong>client 模式</strong> ，组件命名：<strong>SDDL</strong>。</p>
<p>订单服务需要引入是 SDDL 的 jar 包，在配置中心配置 <strong>数据源信息</strong> ，<strong>sharding key</strong> ，<strong>路由规则</strong> 等，订单服务只需要配置一个 <strong>datasourceId</strong> 即可。</p>
<h2 id="_7-分库分表策略" tabindex="-1"> 7 分库分表策略</h2>
<h3 id="_7-1-乘客维度" tabindex="-1"> 7.1 乘客维度</h3>
<p>专车订单数据库的查询主维度是：<strong>乘客</strong>，乘客端按乘客 <strong>user_id</strong> 和 订单 <strong>order_id</strong> 查询频率最高，我们选择 user_id 做为 <strong>sharding key</strong> ，相同用户的订单数据存储到同一个数据库中。</p>
<p>分库分表组件 <strong>SDDL</strong> 和阿里开源的数据库中间件 cobar 路由算法非常类似的。</p>
<p>为了便于思维扩展，先简单介绍下 cobar 的分片算法。</p>
<p>假设现在需要将订单表平均拆分到4个分库 shard0 ，shard1 ，shard2 ，shard3 。首先将 [0-1023] 平均分为4个区段：[0-255]，[256-511]，[512-767]，[768-1023]，然后对字符串（或子串，由用户自定义）做 hash， hash 结果对1024取模，最终得出的结果 <strong>slot</strong> 落入哪个区段，便路由到哪个分库。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/445975e45d5f4d48be938a20dd786481" alt="img" loading="lazy"></p>
<p>cobar 的默认路由算法 ，可以和 <strong>雪花算法</strong> 天然融合在一起， 订单 <strong>order_id</strong> 使用雪花算法，我们可以将 <strong>slot</strong> 的值保存在 <strong>10位工作机器ID</strong> 里。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/42ff0dd7f6994238891a5b3a4441ed2b" alt="img" loading="lazy"></p>
<p>通过订单 <strong>order_id</strong> 可以反查出 <strong>slot</strong> , 就可以定位该用户的订单数据存储在哪个分区里。</p>
<div data-ext="text"><pre><code>Integer getWorkerId(Long orderId) {
 Long workerId = (orderId >> 12) &amp; 0x03ff;
 return workerId.intValue();
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>专车 SDDL 分片算法和 cobar 差异点在于：</p>
<ol>
<li>cobar 支持最大分片数是1024，而 SDDL 最大支持分库数1024*8=8192，同样分四个订单库，每个分片的 slot 区间范围是2048 ；</li>
</ol>
<p><img src="https://s1.vika.cn/space/2022/11/26/76129347a8a045d68cd6e86bf21f14ed" alt="img" loading="lazy"></p>
<ol>
<li>因为要支持8192个分片，雪花算法要做一点微调，雪花算法的10位工作机器修改成<strong>13</strong>位工作机器，时间戳也调整为：<strong>38</strong>位时间戳（由某个时间点开始的毫秒数）。</li>
</ol>
<p><img src="https://s1.vika.cn/space/2022/11/26/fbfb7ce9e08d4c178189e34a1689ba0a" alt="img" loading="lazy"></p>
<h3 id="_7-2-司机维度" tabindex="-1"> 7.2  司机维度</h3>
<p>虽然解决了主维度乘客分库分表问题，但专车还有另外一个查询维度，在司机客户端，司机需要查询分配给他的订单信息。</p>
<p>我们已经按照乘客 user_id 作为 sharding key ，若按照司机 <strong>driver_id</strong> 查询订单的话，需要广播到每一个分库并聚合返回，基于此，技术团队选择将乘客维度的订单数据<strong>异构</strong>到以司机维度的数据库里。</p>
<p>司机维度的分库分表策略和乘客维度逻辑是一样的，只不过 sharding key 变成了司机 <strong>driver_id</strong> 。</p>
<p>异构神器 canal 解析乘客维度四个分库的 binlog ，通过 <strong>SDDL</strong> 写入到司机维度的四个分库里。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/46b4d371a86b40f694c1b5e7b36ba77b" alt="img" loading="lazy"></p>
<p>这里大家可能有个疑问：虽然可以异构将订单同步到司机维度的分库里，毕竟有些许延迟，如何保证司机在司机端查询到最新的订单数据呢 ？</p>
<p>在<strong>缓存和MQ</strong>这一小节里提到：缓存集群中存储最近七天订单详情信息，大量订单读请求直接从缓存获取。订单服务会缓存司机和当前订单的映射，这样司机端的大量请求就可以直接缓存中获取，而司机端查询订单列表的频率没有那么高，异构复制延迟在10毫秒到30毫秒之间，在业务上是完全可以接受的。</p>
<h3 id="_7-3-运营维度" tabindex="-1"> 7.3  运营维度</h3>
<p>专车管理后台，运营人员经常需要查询订单信息，查询条件会比较复杂，专车技术团队采用的做法是：订单数据落盘在乘客维度的订单分库之后，通过 canal 把数据同步到Elastic Search。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/ba0a735dd75743539b220c6d932efa3c" alt="img" loading="lazy"></p>
<h3 id="_7-4-小表广播" tabindex="-1"> 7.4 小表广播</h3>
<p>业务中有一些配置表，存储重要的配置，读多写少。在实际业务查询中，很多业务表会和配置表进行联合数据查询。但在数据库水平拆分后，配置表是无法拆分的。</p>
<p>小表广播的原理是：将小表的所有数据（包括增量更新）自动广播（即复制）到大表的机器上。这样，原来的分布式 JOIN 查询就变成单机本地查询，从而大大提高了效率。</p>
<p>专车场景下，小表广播是非常实用的需求。比如：<strong>城市表</strong>是非常重要的配置表，数据量非常小，但订单服务，派单服务，用户服务都依赖这张表。</p>
<p>通过 canal 将基础配置数据库城市表同步到订单数据库，派单数据库，用户数据库。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/04ba3a41bda044639be1c2b531675a6d" alt="img" loading="lazy"></p>
<h2 id="_8-平滑迁移" tabindex="-1"> 8 平滑迁移</h2>
<p>分库分表组件 <strong>SDDL</strong> 研发完成，并在生产环境得到一定程度的验证后，订单服务从单库 MySQL 模式迁移到分库分表模式条件已经成熟。</p>
<p>迁移思路其实和<strong>从 SQLServer 到 MySQL</strong> 非常类似。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/ed5c3453d9a745cf9765faa565847243" alt="img" loading="lazy"></p>
<p>整体迁移流程：</p>
<ol>
<li>DBA 同学准备乘客维度的四个分库，司机维度的四个分库 ，每个分库都是最近某个时间点的全量数据；</li>
<li>八个分库都是全量数据，需要按照分库分表规则删除八个分库的冗余数据 ；</li>
<li>开启正向同步，旧订单数据按照分库分表策略落盘到乘客维度的分库，通过 canal 将乘客维度分库订单数据异构复制到司机维度的分库中；</li>
<li>开启反向同步，修改订单应用的数据源配置，重启订单服务，订单服务新创建的订单会落盘到乘客维度的分库，通过 canal 将乘客维度分库订单数据异构到<strong>全量订单库</strong>以及司机维度的数据库；</li>
<li>验证数据无误后，逐步更新订单服务的数据源配置，完成整体迁移。</li>
</ol>
<h2 id="_9-数据交换平台" tabindex="-1"> 9 数据交换平台</h2>
<p>专车订单已完成分库分表 , 很多细节都值得复盘：</p>
<ol>
<li>全量历史数据迁移需要 DBA 介入 ，技术团队没有成熟的工具或者产品轻松完成；</li>
<li>增量数据迁移通过 canal 来实现。随着专车业务的爆发增长，数据库镜像，实时索引构建，分库异构等需求越来越多，虽然canal 非常优秀，但它还是有瑕疵，比如缺失任务控制台，数据源管理能力，任务级别的监控和报警，操作审计等功能。</li>
</ol>
<p>面对这些问题，架构团队的目标是打造一个平台，满足各种异构数据源之间的实时增量同步和离线全量同步，支撑公司业务的快速发展。</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/1976b264ebf14a779968db99a77caef4" alt="img" loading="lazy"></p>
<p>基于这个目标，架构团队自研了 <strong>dataLink</strong> 用于增量数据同步，深度定制了阿里开源的 <strong>dataX</strong> 用于全量数据同步。</p>
<h2 id="_10-写到最后" tabindex="-1"> 10 写到最后</h2>
<p>专车<strong>架构进化</strong>之路并非一帆风顺，也有波折和起伏，但一步一个脚印，专车的技术储备越来越深厚。</p>
<p>2017年，瑞幸咖啡在神州优车集团内部孵化，专车的这些技术储备大大提升了瑞幸咖啡技术团队的研发效率，并支撑业务的快速发展。比如瑞幸咖啡的订单数据库最开始规划的时候，就分别按照用户维度，门店维度各拆分了8个数据库实例，分库分表组件 <strong>SDDL</strong> 和 <strong>数据交换平台</strong>都起到了关键的作用 。</p>
<p>好了，这篇文字就写到这里了。我们下期见。</p>
<h2 id="公众号" tabindex="-1"> 公众号</h2>
<p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/11/26/63a1ed837bf44be887aa699f19fe0fe5" type="image/"/>
    </item>
    <item>
      <title>JWT 实现登录认证 + Token 自动续期方案，这才是正确的使用姿势！</title>
      <link>https://newzone.top/nicearticle/art02.html</link>
      <guid>https://newzone.top/nicearticle/art02.html</guid>
      <source url="https://newzone.top/rss.xml">JWT 实现登录认证 + Token 自动续期方案，这才是正确的使用姿势！</source>
      <description>过去这段时间主要负责了项目中的用户管理模块，用户管理模块会涉及到加密及认证流程，加密已经在前面的文章中介绍了，可以阅读用户管理模块：如何保证用户数据安全。今天就来讲讲认证功能的技术选型及实现。技术上没啥难度当然也没啥挑战，但是对一个原先没写过认证功能的菜鸡甜来说也是一种锻炼吧</description>
      <category>好文收集</category>
      <pubDate>Sat, 26 Nov 2022 12:36:29 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>过去这段时间主要负责了项目中的用户管理模块，用户管理模块会涉及到加密及认证流程，加密已经在前面的文章中介绍了，可以阅读<a href="https://juejin.cn/post/6916150628955717646" target="_blank" rel="noopener noreferrer">用户管理模块：如何保证用户数据安全</a>。今天就来讲讲认证功能的技术选型及实现。技术上没啥难度当然也没啥挑战，但是对一个原先没写过认证功能的菜鸡甜来说也是一种锻炼吧</p>
</blockquote>
<h3 id="技术选型" tabindex="-1"> 技术选型</h3>
<p>要实现认证功能，很容易就会想到JWT或者session，但是两者有啥区别？各自的优缺点？应该Pick谁？夺命三连</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/ca24a490d0334e3b8593c8a0e725baa5" alt="img" loading="lazy"></p>
<h4 id="区别" tabindex="-1"> 区别</h4>
<p>基于session和基于JWT的方式的主要区别就是用户的状态保存的位置，<strong>session是保存在服务端</strong>的，而<strong>JWT是保存在客户端</strong>的</p>
<h4 id="认证流程" tabindex="-1"> 认证流程</h4>
<h5 id="基于session的认证流程" tabindex="-1"> 基于session的认证流程</h5>
<ul>
<li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个session并保存到数据库</li>
<li>服务器为用户生成一个sessionId，并将具有sesssionId的cookie放置在用户浏览器中，在后续的请求中都将带有这个cookie信息进行访问</li>
<li>服务器获取cookie，通过获取cookie中的sessionId查找数据库判断当前请求是否有效</li>
</ul>
<h5 id="基于jwt的认证流程" tabindex="-1"> 基于JWT的认证流程</h5>
<ul>
<li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个token并保存到数据库</li>
<li>前端获取到token，存储到cookie或者local storage中，在后续的请求中都将带有这个token信息进行访问</li>
<li>服务器获取token值，通过查找数据库判断当前token是否有效</li>
</ul>
<h4 id="优缺点" tabindex="-1"> 优缺点</h4>
<ul>
<li>JWT保存在客户端，在分布式环境下不需要做额外工作。而session因为保存在服务端，分布式环境下需要实现多机数据共享</li>
<li>session一般需要结合Cookie实现认证，所以需要浏览器支持cookie，因此移动端无法使用session认证方案</li>
</ul>
<h5 id="安全性" tabindex="-1"> 安全性</h5>
<ul>
<li>JWT的payload使用的是base64编码的，因此在<strong>JWT中不能存储敏感数据</strong>。而session的信息是存在服务端的，相对来说更安全</li>
</ul>
<p><img src="https://s1.vika.cn/space/2022/11/26/dd5f08e622c84c02b12897686d7b4b35" alt="image.png" loading="lazy"></p>
<p>如果在JWT中存储了敏感信息，可以解码出来非常的不安全</p>
<h5 id="性能" tabindex="-1"> 性能</h5>
<ul>
<li>经过编码之后JWT将非常长，cookie的限制大小一般是4k，cookie很可能放不下，所以JWT一般放在local storage里面。并且用户在系统中的每一次http请求都会把JWT携带在Header里面，HTTP请求的Header可能比Body还要大。而sessionId只是很短的一个字符串，因此使用JWT的HTTP请求比使用session的开销大得多</li>
</ul>
<h5 id="一次性" tabindex="-1"> 一次性</h5>
<p>无状态是JWT的特点，但也导致了这个问题，JWT是一次性的。想修改里面的内容，就必须签发一个新的JWT</p>
<ul>
<li>无法废弃
一旦签发一个JWT，在到期之前就会始终有效，无法中途废弃。若想废弃，一种常用的处理手段是结合redis</li>
<li>续签
如果使用JWT做会话管理，传统的cookie续签方案一般都是框架自带的，session有效期30分钟，30分钟内如果有访问，有效期被刷新至30分钟。一样的道理，要改变JWT的有效时间，就要签发新的JWT。最简单的一种方式是每次请求刷新JWT，即每个HTTP请求都返回一个新的JWT。这个方法不仅暴力不优雅，而且每次请求都要做JWT的加密解密，会带来性能问题。另一种方法是在redis中单独为每个JWT设置过期时间，每次访问时刷新JWT的过期时间</li>
</ul>
<h4 id="选择jwt或session" tabindex="-1"> 选择JWT或session</h4>
<p>我投JWT一票，JWT有很多缺点，但是在分布式环境下不需要像session一样额外实现多机数据共享，虽然seesion的多机数据共享可以通过<strong>粘性session</strong>、<strong>session共享</strong>、<strong>session复制</strong>、<strong>持久化session</strong>、<strong>terracoa实现seesion复制</strong>等多种成熟的方案来解决这个问题。但是JWT不需要额外的工作，使用JWT不香吗？且JWT一次性的缺点可以结合redis进行弥补。扬长补短，因此在实际项目中选择的是使用JWT来进行认证</p>
<h3 id="功能实现" tabindex="-1"> 功能实现</h3>
<h4 id="jwt所需依赖" tabindex="-1"> JWT所需依赖</h4>
<div data-ext="xml"><pre><code><span><span><span>&lt;</span>dependency</span><span>></span></span>
    <span><span><span>&lt;</span>groupId</span><span>></span></span>com.auth0<span><span><span>&lt;/</span>groupId</span><span>></span></span>
    <span><span><span>&lt;</span>artifactId</span><span>></span></span>java-jwt<span><span><span>&lt;/</span>artifactId</span><span>></span></span>
    <span><span><span>&lt;</span>version</span><span>></span></span>3.10.3<span><span><span>&lt;/</span>version</span><span>></span></span>
<span><span><span>&lt;/</span>dependency</span><span>></span></span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="jwt工具类" tabindex="-1"> JWT工具类</h4>
<div data-ext="ts"><pre><code><span>public</span> <span>class</span> <span>JWTUtil</span> <span>{</span>
    <span>private</span> <span>static</span> final Logger logger <span>=</span> LoggerFactory<span>.</span><span>getLogger</span><span>(</span>JWTUtil<span>.</span>class<span>)</span><span>;</span>

    <span>//私钥</span>
    <span>private</span> <span>static</span> final String <span>TOKEN_SECRET</span> <span>=</span> <span>"123456"</span><span>;</span>

    <span>/**
     * 生成token，自定义过期时间 毫秒
     *
     * <span>@param</span> <span>userTokenDTO</span>
     * <span>@return</span>
     */</span>
    <span>public</span> <span>static</span> String <span>generateToken</span><span>(</span>UserTokenDTO userTokenDTO<span>)</span> <span>{</span>
        <span>try</span> <span>{</span>
            <span>// 私钥和加密算法</span>
            Algorithm algorithm <span>=</span> Algorithm<span>.</span><span>HMAC256</span><span>(</span><span>TOKEN_SECRET</span><span>)</span><span>;</span>
            <span>// 设置头部信息</span>
            Map<span>&lt;</span>String<span>,</span> Object<span>></span> header <span>=</span> <span>new</span> <span>HashMap<span>&lt;</span><span>></span></span><span>(</span><span>2</span><span>)</span><span>;</span>
            header<span>.</span><span>put</span><span>(</span><span>"Type"</span><span>,</span> <span>"Jwt"</span><span>)</span><span>;</span>
            header<span>.</span><span>put</span><span>(</span><span>"alg"</span><span>,</span> <span>"HS256"</span><span>)</span><span>;</span>

            <span>return</span> <span>JWT</span><span>.</span><span>create</span><span>(</span><span>)</span>
                    <span>.</span><span>withHeader</span><span>(</span>header<span>)</span>
                    <span>.</span><span>withClaim</span><span>(</span><span>"token"</span><span>,</span> JSONObject<span>.</span><span>toJSONString</span><span>(</span>userTokenDTO<span>)</span><span>)</span>
                    <span>//.withExpiresAt(date)</span>
                    <span>.</span><span>sign</span><span>(</span>algorithm<span>)</span><span>;</span>
        <span>}</span> <span>catch</span> <span>(</span>Exception e<span>)</span> <span>{</span>
            logger<span>.</span><span>error</span><span>(</span><span>"generate token occur error, error is:{}"</span><span>,</span> e<span>)</span><span>;</span>
            <span>return</span> <span>null</span><span>;</span>
        <span>}</span>
    <span>}</span>

    <span>/**
     * 检验token是否正确
     *
     * <span>@param</span> <span>token</span>
     * <span>@return</span>
     */</span>
    <span>public</span> <span>static</span> UserTokenDTO <span>parseToken</span><span>(</span>String token<span>)</span> <span>{</span>
        Algorithm algorithm <span>=</span> Algorithm<span>.</span><span>HMAC256</span><span>(</span><span>TOKEN_SECRET</span><span>)</span><span>;</span>
        JWTVerifier verifier <span>=</span> <span>JWT</span><span>.</span><span>require</span><span>(</span>algorithm<span>)</span><span>.</span><span>build</span><span>(</span><span>)</span><span>;</span>
        DecodedJWT jwt <span>=</span> verifier<span>.</span><span>verify</span><span>(</span>token<span>)</span><span>;</span>
        String tokenInfo <span>=</span> jwt<span>.</span><span>getClaim</span><span>(</span><span>"token"</span><span>)</span><span>.</span><span>asString</span><span>(</span><span>)</span><span>;</span>
        <span>return</span> <span>JSON</span><span>.</span><span>parseObject</span><span>(</span>tokenInfo<span>,</span> UserTokenDTO<span>.</span>class<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>说明：</p>
<ul>
<li>生成的token中不带有过期时间，token的过期时间由redis进行管理</li>
<li>UserTokenDTO中不带有敏感信息，如password字段不会出现在token中</li>
</ul>
<h4 id="redis工具类" tabindex="-1"> Redis工具类</h4>
<div data-ext="ts"><pre><code><span>public</span> final <span>class</span> <span>RedisServiceImpl</span> <span>implements</span> <span>RedisService</span> <span>{</span>
    <span>/**
     * 过期时长
     */</span>
    <span>private</span> final Long <span>DURATION</span> <span>=</span> <span>1</span> <span>*</span> <span>24</span> <span>*</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> 1000L<span>;</span>

    <span><span>@</span><span>Resource</span></span>
    <span>private</span> RedisTemplate redisTemplate<span>;</span>

    <span>private</span> ValueOperations<span>&lt;</span>String<span>,</span> String<span>></span> valueOperations<span>;</span>

    <span><span>@</span><span>PostConstruct</span></span>
    <span>public</span> <span>void</span> <span>init</span><span>(</span><span>)</span> <span>{</span>
        RedisSerializer redisSerializer <span>=</span> <span>new</span> <span>StringRedisSerializer</span><span>(</span><span>)</span><span>;</span>
        redisTemplate<span>.</span><span>setKeySerializer</span><span>(</span>redisSerializer<span>)</span><span>;</span>
        redisTemplate<span>.</span><span>setValueSerializer</span><span>(</span>redisSerializer<span>)</span><span>;</span>
        redisTemplate<span>.</span><span>setHashKeySerializer</span><span>(</span>redisSerializer<span>)</span><span>;</span>
        redisTemplate<span>.</span><span>setHashValueSerializer</span><span>(</span>redisSerializer<span>)</span><span>;</span>
        valueOperations <span>=</span> redisTemplate<span>.</span><span>opsForValue</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span><span>@</span><span>Override</span></span>
    <span>public</span> <span>void</span> <span>set</span><span>(</span>String key<span>,</span> String value<span>)</span> <span>{</span>
        valueOperations<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>,</span> <span>DURATION</span><span>,</span> TimeUnit<span>.</span><span>MILLISECONDS</span><span>)</span><span>;</span>
        log<span>.</span><span>info</span><span>(</span><span>"key={}, value is: {} into redis cache"</span><span>,</span> key<span>,</span> value<span>)</span><span>;</span>
    <span>}</span>

    <span><span>@</span><span>Override</span></span>
    <span>public</span> String <span>get</span><span>(</span>String key<span>)</span> <span>{</span>
        String redisValue <span>=</span> valueOperations<span>.</span><span>get</span><span>(</span>key<span>)</span><span>;</span>
        log<span>.</span><span>info</span><span>(</span><span>"get from redis, value is: {}"</span><span>,</span> redisValue<span>)</span><span>;</span>
        <span>return</span> redisValue<span>;</span>
    <span>}</span>

    <span><span>@</span><span>Override</span></span>
    <span>public</span> <span>boolean</span> <span>delete</span><span>(</span>String key<span>)</span> <span>{</span>
        <span>boolean</span> result <span>=</span> redisTemplate<span>.</span><span>delete</span><span>(</span>key<span>)</span><span>;</span>
        log<span>.</span><span>info</span><span>(</span><span>"delete from redis, key is: {}"</span><span>,</span> key<span>)</span><span>;</span>
        <span>return</span> result<span>;</span>
    <span>}</span>

    <span><span>@</span><span>Override</span></span>
    <span>public</span> Long <span>getExpireTime</span><span>(</span>String key<span>)</span> <span>{</span>
        <span>return</span> valueOperations<span>.</span><span>getOperations</span><span>(</span><span>)</span><span>.</span><span>getExpire</span><span>(</span>key<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>RedisTemplate简单封装</p>
<h4 id="业务实现" tabindex="-1"> 业务实现</h4>
<h5 id="登陆功能" tabindex="-1"> 登陆功能</h5>
<div data-ext="scss"><pre><code>public String <span>login</span><span>(</span>LoginUserVO loginUserVO<span>)</span> <span>{</span>
    <span>//1.判断用户名密码是否正确</span>
    UserPO userPO = userMapper.<span>getByUsername</span><span>(</span>loginUserVO.<span>getUsername</span><span>(</span><span>)</span><span>)</span><span>;</span>
    if <span>(</span>userPO <span>==</span> <span>null</span><span>)</span> <span>{</span>
        throw new <span>UserException</span><span>(</span>ErrorCodeEnum.TNP1001001<span>)</span><span>;</span>
    <span>}</span>
    if <span>(</span>!loginUserVO.<span>getPassword</span><span>(</span><span>)</span>.<span>equals</span><span>(</span>userPO.<span>getPassword</span><span>(</span><span>)</span><span>)</span><span>)</span> <span>{</span>
        throw new <span>UserException</span><span>(</span>ErrorCodeEnum.TNP1001002<span>)</span><span>;</span>
    <span>}</span>

    <span>//2.用户名密码正确生成token</span>
    UserTokenDTO userTokenDTO = new <span>UserTokenDTO</span><span>(</span><span>)</span><span>;</span>
    PropertiesUtil.<span>copyProperties</span><span>(</span>userTokenDTO<span>,</span> loginUserVO<span>)</span><span>;</span>
    userTokenDTO.<span>setId</span><span>(</span>userPO.<span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
    userTokenDTO.<span>setGmtCreate</span><span>(</span>System.<span>currentTimeMillis</span><span>(</span><span>)</span><span>)</span><span>;</span>
    String token = JWTUtil.<span>generateToken</span><span>(</span>userTokenDTO<span>)</span><span>;</span>

    <span>//3.存入token至redis</span>
    redisService.<span>set</span><span>(</span>userPO.<span>getId</span><span>(</span><span>)</span><span>,</span> token<span>)</span><span>;</span>
    return token<span>;</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>说明：</p>
<ul>
<li>判断用户名密码是否正确</li>
<li>用户名密码正确则生成token</li>
<li>将生成的token保存至redis</li>
</ul>
<h5 id="登出功能" tabindex="-1"> 登出功能</h5>
<div data-ext="ts"><pre><code><span>public</span> <span>boolean</span> <span>loginOut</span><span>(</span>String id<span>)</span> <span>{</span>
     <span>boolean</span> result <span>=</span> redisService<span>.</span><span>delete</span><span>(</span>id<span>)</span><span>;</span>
     <span>if</span> <span>(</span><span>!</span>redisService<span>.</span><span>delete</span><span>(</span>id<span>)</span><span>)</span> <span>{</span>
        <span>throw</span> <span>new</span> <span>UserException</span><span>(</span>ErrorCodeEnum<span>.</span><span>TNP1001003</span><span>)</span><span>;</span>
     <span>}</span>

     <span>return</span> result<span>;</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>将对应的key删除即可</p>
<h5 id="更新密码功能" tabindex="-1"> 更新密码功能</h5>
<div data-ext="scss"><pre><code>public String <span>updatePassword</span><span>(</span>UpdatePasswordUserVO updatePasswordUserVO<span>)</span> <span>{</span>
    <span>//1.修改密码</span>
    UserPO userPO = UserPO.<span>builder</span><span>(</span><span>)</span>.<span>password</span><span>(</span>updatePasswordUserVO.<span>getPassword</span><span>(</span><span>)</span><span>)</span>
            .<span>id</span><span>(</span>updatePasswordUserVO.<span>getId</span><span>(</span><span>)</span><span>)</span>
            .<span>build</span><span>(</span><span>)</span><span>;</span>
    UserPO user = userMapper.<span>getById</span><span>(</span>updatePasswordUserVO.<span>getId</span><span>(</span><span>)</span><span>)</span><span>;</span>
    if <span>(</span>user <span>==</span> <span>null</span><span>)</span> <span>{</span>
        throw new <span>UserException</span><span>(</span>ErrorCodeEnum.TNP1001001<span>)</span><span>;</span>
    <span>}</span>

    if <span>(</span>userMapper.<span>updatePassword</span><span>(</span>userPO<span>)</span> <span>!=</span> 1<span>)</span> <span>{</span>
        throw new <span>UserException</span><span>(</span>ErrorCodeEnum.TNP1001005<span>)</span><span>;</span>
    <span>}</span>
    <span>//2.生成新的token</span>
    UserTokenDTO userTokenDTO = UserTokenDTO.<span>builder</span><span>(</span><span>)</span>
            .<span>id</span><span>(</span>updatePasswordUserVO.<span>getId</span><span>(</span><span>)</span><span>)</span>
            .<span>username</span><span>(</span>user.<span>getUsername</span><span>(</span><span>)</span><span>)</span>
            .<span>gmtCreate</span><span>(</span>System.<span>currentTimeMillis</span><span>(</span><span>)</span><span>)</span>.<span>build</span><span>(</span><span>)</span><span>;</span>
    String token = JWTUtil.<span>generateToken</span><span>(</span>userTokenDTO<span>)</span><span>;</span>
    <span>//3.更新token</span>
    redisService.<span>set</span><span>(</span>user.<span>getId</span><span>(</span><span>)</span><span>,</span> token<span>)</span><span>;</span>
    return token<span>;</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>说明：
更新用户密码时需要重新生成新的token，并将新的token返回给前端，由前端更新保存在local storage中的token，同时更新存储在redis中的token，这样实现可以避免用户重新登陆，用户体验感不至于太差</p>
<h5 id="其他说明" tabindex="-1"> 其他说明</h5>
<ul>
<li>在实际项目中，用户分为普通用户和管理员用户，只有管理员用户拥有删除用户的权限，这一块功能也是涉及token操作的，但是我太懒了，demo工程就不写了</li>
<li>在实际项目中，密码传输是加密过的</li>
</ul>
<h4 id="拦截器类" tabindex="-1"> 拦截器类</h4>
<div data-ext="vbscript"><pre><code>public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
                             Object handler) throws Exception {
    String authToken = request.getHeader(&quot;Authorization&quot;);
    String token = authToken.substring(&quot;Bearer&quot;.length() + 1).trim();
    UserTokenDTO userTokenDTO = JWTUtil.parseToken(token);
    //1.判断请求是否有效
    if (redisService.get(userTokenDTO.getId()) == null 
            || !redisService.get(userTokenDTO.getId()).equals(token)) {
        return false;
    }

    //2.判断是否需要续期
    if (redisService.getExpireTime(userTokenDTO.getId()) &lt; 1 * 60 * 30) {
        redisService.set(userTokenDTO.getId(), token);
        log.error(&quot;update token info, id is:{}, user info is:{}&quot;, userTokenDTO.getId(), token);
    }
    return true;
}
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>说明：
拦截器中主要做两件事，一是对token进行校验，二是判断token是否需要进行续期
token校验：</p>
<ul>
<li>判断id对应的token是否不存在，不存在则token过期</li>
<li>若token存在则比较token是否一致，保证同一时间只有一个用户操作</li>
</ul>
<p>token自动续期：  为了不频繁操作redis，只有当离过期时间只有30分钟时才更新过期时间</p>
<h4 id="拦截器配置类" tabindex="-1"> 拦截器配置类</h4>
<div data-ext="ts"><pre><code><span><span>@</span><span>Configuration</span></span>
<span>public</span> <span>class</span> <span>InterceptorConfig</span> <span>implements</span> <span>WebMvcConfigurer</span> <span>{</span>
    <span><span>@</span><span>Override</span></span>
    <span>public</span> <span>void</span> <span>addInterceptors</span><span>(</span>InterceptorRegistry registry<span>)</span> <span>{</span>
        registry<span>.</span><span>addInterceptor</span><span>(</span><span>authenticateInterceptor</span><span>(</span><span>)</span><span>)</span>
                <span>.</span><span>excludePathPatterns</span><span>(</span><span>"/logout/**"</span><span>)</span>
                <span>.</span><span>excludePathPatterns</span><span>(</span><span>"/login/**"</span><span>)</span>
                <span>.</span><span>addPathPatterns</span><span>(</span><span>"/**"</span><span>)</span><span>;</span>
    <span>}</span>

    <span><span>@</span><span>Bean</span></span>
    <span>public</span> AuthenticateInterceptor <span>authenticateInterceptor</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>new</span> <span>AuthenticateInterceptor</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
复制代码
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="写在最后" tabindex="-1"> 写在最后</h4>
<p>若有纰漏不足，欢迎指出</p>
<p><img src="https://s1.vika.cn/space/2022/11/26/6e388d9d96f34c5bbbc8213a4d2b23d2" alt="img" loading="lazy"></p>
<p><strong>点个赞</strong>在走</p>
<h2 id="公众号" tabindex="-1"> 公众号</h2>
<p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://s1.vika.cn/space/2022/11/26/ca24a490d0334e3b8593c8a0e725baa5" type="image/"/>
    </item>
  </channel>
</rss>