import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as n,b as s,d as t,e,r as c}from"./app.1bd496e1.js";const i={},u=e(`<h2 id="什么是服务网关" tabindex="-1"><a class="header-anchor" href="#什么是服务网关" aria-hidden="true">#</a> 什么是服务网关 ？</h2><blockquote><p>Api Gateway（APIGW/API 网关），是出现在系统边界的一个面向 Api 的、串行集中式的强管控服务，这里的边界是企业IT系统的边界，可以理解为企业级应用防火墙。主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，Api 网关就已经诞生了，例如银行、证券等领域的前置机系统，它可以解决访问认证、报文转换、访问统计等问题。</p><p>Api 网关是一个服务器，是系统对外的唯一入口。Api 网关封装了系统内部架构，为每个客户端提供定制 Api。所有的客户端和消费端都需要通过统一的网关接入微服务，在网关层处理所有非业务功能。Api网关并不是微服务场景中必须的组件，如下图，不管有没有 Api 网关，后端微服务都可以通过 Api 很好的支持客户端的访问。</p></blockquote><p>Spring Cloud 中，网关主要有两种实现方案：</p><ul><li>Zuul</li><li>Spring Cloud Gateway</li></ul><h2 id="zuul-简介" tabindex="-1"><a class="header-anchor" href="#zuul-简介" aria-hidden="true">#</a> Zuul 简介</h2><blockquote><p>zuul 是从设备和网站到应用程序后端的所有请求的前门。作为边缘服务的应用程序，旨在实现动态路由、监视、弹性和安全性。包含了队请求的路由和过滤这两个最主要的功能。</p></blockquote><p>zuul 是 Netflix 开源的服务网关，它可以和 Eureka、Ribbon、Hystrix 等组件配合使用。核心就是一系列的过滤器。并以过滤器完成以下的功能：</p><ul><li>权限控制，可以做认证和授权</li><li>监控</li><li>动态路由</li><li>负载均衡</li><li>静态资源处理</li></ul><p>Zuul 中的功能基本上都是基于过滤器来实现，它的过滤器有几种不同的类型：</p><ul><li>PRE（前置过滤器）</li><li>ROUTING（将请求路由到微服务中）</li><li>POST</li><li>ERROR</li></ul><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><p>创建一个基础的 Spring Boot 工程，命名为 zuul，并在 pom.xml 中添加如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目创建成功之后，将 zuul 注册到 eureka 上：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">zuul</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">2022</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:1111/eureka</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建应用主类，使用 <code>@EnableZuulProxy</code> 注解开启 Zuul 的 API 网关服务功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableZuulProxy</span> <span class="token comment">//开启网关代理</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ZuulApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上面的工作后，通过 Zuul 实现的 API 服务网关就构建完毕了。</p><h2 id="请求路由" tabindex="-1"><a class="header-anchor" href="#请求路由" aria-hidden="true">#</a> 请求路由</h2><h3 id="传统的路由方式" tabindex="-1"><a class="header-anchor" href="#传统的路由方式" aria-hidden="true">#</a> 传统的路由方式</h3><p>使用 Spring Cloud Zuul 实现路由功能非常简单，只需要对 zuul 服务增加一些关于路由规则的配置，就能实现传统的路由转发功能，比如：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">zuul.routes.marico.path</span><span class="token punctuation">=</span><span class="token value attr-value">/marico/**</span>
<span class="token key attr-name">zuul.routes.marico.url</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:2020/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,22),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"提示",-1),k=n("code",null,"/api-a-url/**",-1),v={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://localhost:2020/marico/hello",target:"_blank",rel:"noopener noreferrer"},b={href:"http://localhost:2020/hello",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"zuul.routes.marico.path",-1),g=e(`<h3 id="面向服务的路由" tabindex="-1"><a class="header-anchor" href="#面向服务的路由" aria-hidden="true">#</a> 面向服务的路由</h3><blockquote><p>很显然，传统的路由的配置方式对于我们来说并不友好，它同样需要运维人员花费大量的时间来维护各个路由 path 与 url 的关系。为了解决这个问题，Spring Cloud Zuul 实现了与 Spring Cloud Eureka 的无缝整合，我们可以让路由的 path 不是映射具体的 url，而是让它映射到某个具体的服务，而具体的 url 则是交给 Eureka 的服务发现机制去自动维护，我们将这类路由为面向服务的路由。</p></blockquote><p>在 zuul 的 applictaion.properties 配置文件中配置服务路由，具体如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">zuul.routes.marico.path</span><span class="token punctuation">=</span><span class="token value attr-value">/marico/**</span>
<span class="token key attr-name">zuul.routes.marico.service-id</span><span class="token punctuation">=</span><span class="token value attr-value">provider</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以将伤处两个配置精简为一行配置：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">zuul.routes.provider</span><span class="token punctuation">=</span><span class="token value attr-value">/marico/**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),f={href:"http://localhost:2022/marico/hello",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("img",{src:"https://s1.vika.cn/space/2022/11/21/c6e6f298aa714a5fb70b0a8d203802ac",alt:"image-20221108194750748",loading:"lazy"})],-1),x={class:"custom-container tip"},_=n("p",{class:"custom-container-title"},"说明",-1),w={href:"http://localhost:2022/marico/hello%EF%BC%8C%E8%AF%A5",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"/marico/**",-1),z=e(`<p>通过面向服务的路由配置方式，我们不需要再为各个路由维护微服务应用的具体实例的位置，而是通过简单的 path 与 serviceId 的映射结合，使得维护工作变得非常简单。完美的解决了对路由映射实例的维护问题。</p><h2 id="请求过滤" tabindex="-1"><a class="header-anchor" href="#请求过滤" aria-hidden="true">#</a> 请求过滤</h2><blockquote><p>到目前为止，服务路由并没有限制权限这样的功能，所有请求都会被毫无保留地转发到具体的应用并返回结果，为了实现对客户端请求的安全校验和权限控制，最简单和粗暴的方法就是为每个微服务应用都实现一套用于校验签名和鉴别权限的过滤器和拦截器。</p></blockquote><p>对于来自客户端的请求，可以在 Zuul 中进行预处理，例如权限判断等。定义一个简单的<code>权限过滤器</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>marico<span class="token punctuation">.</span>zuul</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span></span><span class="token class-name">ZuulFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">RequestContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">ZuulException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 过滤器类型，权限判断一般是 pre
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 过滤器优先级
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 是否过滤
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ZuulException</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestContext</span> ctx <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;marico&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ctx<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">addZuulResponseHeader</span><span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctx<span class="token punctuation">.</span><span class="token function">setResponseBody</span><span class="token punctuation">(</span><span class="token string">&quot;非法访问&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 Zuul，接下来，发送请求必须带上 username 和 password 参数，否则请求不通过。</p><p><img src="https://s1.vika.cn/space/2022/11/21/e46ab46fa933485c9ebe4fa6c1274fac" alt="image-20221109145615479" loading="lazy"></p><p>不携带或者携带参数值错误：</p><p><img src="https://s1.vika.cn/space/2022/11/21/b8990b00745c4b3ab9d737ed3100cb4c" alt="image-20221109145603164" loading="lazy"></p><h2 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置" aria-hidden="true">#</a> 其他配置</h2><h3 id="路径匹配" tabindex="-1"><a class="header-anchor" href="#路径匹配" aria-hidden="true">#</a> 路径匹配</h3><p>在 Zuul 中，路由匹配的路径表达式采用了 Ant 风格定义。</p><p>Ant 风格的路径表达式使用起来非常简单，它一共有下面这三种通配符</p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>？</td><td>匹配任意单个字符</td></tr><tr><td>*</td><td>匹配任意数量的字符</td></tr><tr><td>**</td><td>匹配任意数量的字符，支持多级目录</td></tr></tbody></table><p>通过下表中的示例来进一步理解这三个通配符的含义</p><table><thead><tr><th>URL 路径</th><th>说明</th></tr></thead><tbody><tr><td>/provider/?</td><td>它可以匹配 /provider/ 之后拼接一个任意字符的路径。</td></tr><tr><td>/provider/*</td><td>它可以匹配 /provider/ 之后拼接任意字符的路径。</td></tr><tr><td>/provider/**</td><td>不仅可以匹配 /provider/* 包含的内容之外，还可以匹配形如 /provider/a/b 的多级目录</td></tr></tbody></table><h3 id="忽略表达式" tabindex="-1"><a class="header-anchor" href="#忽略表达式" aria-hidden="true">#</a> 忽略表达式</h3><blockquote><p>Zuul 提供了一个忽略表达式参数 <code>zuul.ignored-patterns</code> 。该参数可以用来设置不希望被 API 官网进行路由的 URL 表达式。</p></blockquote><p>比如，不希望 /hello 接口被路由，可以在 application.properties 配置如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">zuul.ignored-patterns</span><span class="token punctuation">=</span><span class="token value attr-value">/**/hello/**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时，如果不想被某个服务做代理服务，可以忽略该服务</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">zuul.ignored-services</span><span class="token punctuation">=</span><span class="token value attr-value">provider </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="路由前缀" tabindex="-1"><a class="header-anchor" href="#路由前缀" aria-hidden="true">#</a> 路由前缀</h3><blockquote><p>为了方便全局地为路由规则增加前缀信息。Zuul 提供了 zuul.prefix 参数来进行设置。</p></blockquote><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 添加前缀</span>
<span class="token comment">#zuul.prefix=/marico</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，以后所有的请求地址自动多了前缀 /marico</p>`,26);function I(A,Z){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("div",r,[d,n("p",null,[s("该配置定义了发往 API 网关服务的请求中，所有符合 "),k,s(" 规则的访问都将被路由转发到"),n("a",v,[s("http://localhost:8080/"),t(a)]),s(" 地址上，也就是说，当我们访问 "),n("a",m,[s("http://localhost:2020/marico/hello"),t(a)]),s(" 的时候，API 网关服务会将该请求路由到 "),n("a",b,[s("http://localhost:2020/hello"),t(a)]),s(" 提供的微服务接口上。其中，配置属性 "),h,s(" 中的 marico 部分为路由的名字，可以任意定义，但是一组 path 和 url 映射关系名要相同。")])]),g,n("p",null,[s("配置完成之后，分别启动 eureka、zuul、provider 服务，启动完成之后，访问 "),n("a",f,[s("http://localhost:2022/marico/hello"),t(a)])]),y,n("div",x,[_,n("p",null,[n("a",w,[s("http://localhost:2022/marico/hello，该"),t(a)]),s(" url 符合 "),q,s(" 规则，由名叫 marico 的路由负责转发，该路由映射的 serviceId 为 provider，所以最终 /hello 请求会被发送到 provider 服务的某个实例上去。")])]),z])}const C=p(i,[["render",I],["__file","zuul.html.vue"]]);export{C as default};
