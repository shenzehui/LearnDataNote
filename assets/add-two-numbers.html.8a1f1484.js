import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as r,a as e,b as a,d,e as i,r as c}from"./app.11c1afcc.js";const o={},l={href:"https://leetcode.cn/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="题意" tabindex="-1"><a class="header-anchor" href="#题意" aria-hidden="true">#</a> 题意</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p><img src="https://s1.vika.cn/space/2022/11/21/ceb87640ab294e0084009f9e0b207069" alt="img" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="题解" tabindex="-1"><a class="header-anchor" href="#题解" aria-hidden="true">#</a> 题解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">大致思路</p><p>首先定义一个 HashMap，在 key 中存储的是当前数组的每个元素值，value 存储的是元素所在的索引下标，遍历数组，先求每个值匹配的值 thatNum，之后再判断 HashMap 中是否存在该值，若存在，则直接返回两个数对应的索引值（因为题目中已明确说明只有一个解，所以无需再求解）；若循环结束后还没有找到结果，则直接抛出参数错误异常。</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>灵活的使用了一个重要的数据结构 — hash 表，利用 java 给我们提供的 HashMap ，通过 <code>map.containsKey()</code> 快速的寻找对应的数。</p>`,12);function p(u,m){const n=c("ExternalLinkIcon");return t(),r("div",null,[e("blockquote",null,[e("p",null,[a("力扣链接："),e("a",l,[a("https://leetcode.cn/problems/two-sum/"),d(n)])])]),h])}const _=s(o,[["render",p],["__file","add-two-numbers.html.vue"]]);export{_ as default};
