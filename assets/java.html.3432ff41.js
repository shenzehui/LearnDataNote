import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as t}from"./app.3d24f990.js";const e={},p=t(`<h2 id="jdk、jre、jvm-三者区别和联系" tabindex="-1"><a class="header-anchor" href="#jdk、jre、jvm-三者区别和联系" aria-hidden="true">#</a> JDK、JRE、JVM 三者区别和联系</h2><p>JDK：Java Develpment Kit java 开发工具</p><p>JRE：Java Runtime Environment java 运行时环境</p><p>JVM：java Virtual Machine java 虚拟机</p><h3 id="jdk-安装目录" tabindex="-1"><a class="header-anchor" href="#jdk-安装目录" aria-hidden="true">#</a> JDK 安装目录</h3><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/image-20221110144358619.png" alt="" loading="lazy"></p><h3 id="三者区别" tabindex="-1"><a class="header-anchor" href="#三者区别" aria-hidden="true">#</a> 三者区别</h3><h2 id="jvm-调优" tabindex="-1"><a class="header-anchor" href="#jvm-调优" aria-hidden="true">#</a> JVM 调优</h2><h3 id="jdk体系结构" tabindex="-1"><a class="header-anchor" href="#jdk体系结构" aria-hidden="true">#</a> JDK体系结构</h3><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/image-20221110145024143.png" alt="image-20221110145024143" loading="lazy"></p><h3 id="jvm-整体架构" tabindex="-1"><a class="header-anchor" href="#jvm-整体架构" aria-hidden="true">#</a> JVM 整体架构</h3><h3 id="栈-线程栈" tabindex="-1"><a class="header-anchor" href="#栈-线程栈" aria-hidden="true">#</a> 栈/线程栈</h3><p><strong>一个方法对应一块<code>栈帧内存区域</code>！！</strong></p><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>每一个线程都会给他分配的内存空间，放的是线程运行代码的行号的位置，会随着代码运行变化</p><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/JVM内存模型.png" alt="" loading="lazy"></p><h3 id="局部变量表" tabindex="-1"><a class="header-anchor" href="#局部变量表" aria-hidden="true">#</a> 局部变量表</h3><p>存放当前线程中的局部变量</p><h3 id="操作数栈" tabindex="-1"><a class="header-anchor" href="#操作数栈" aria-hidden="true">#</a> 操作数栈</h3><p>临时存储空间，操作数（可以理解为局部变量）进行加减乘除的临时存储空间</p><h3 id="为什么要设计程序计数器" tabindex="-1"><a class="header-anchor" href="#为什么要设计程序计数器" aria-hidden="true">#</a> 为什么要设计程序计数器？</h3><p>线程切换：Java是支持多线程的，当要进行线程切换的时候，若想要恢复当前线程，就必须记录当期线程执行的位置，这时候程序计数器就会帮我们记录代码执行位置。</p><h3 id="动态链接" tabindex="-1"><a class="header-anchor" href="#动态链接" aria-hidden="true">#</a> 动态链接</h3><p>把符号应用转为直接引用，就是指向对应 compute 方法对应的内存地址。</p><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/image-20221110160304947.png" alt="image-20221110160304947" loading="lazy"></p><h3 id="方法出口" tabindex="-1"><a class="header-anchor" href="#方法出口" aria-hidden="true">#</a> 方法出口</h3><p>当 coumpute 方法执行的过程中，会将线程位置保存在 compute 方法中，当执行完毕后，会读取 compute 方法中记录的会从哪个 main 方法的位置去执行。</p><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h3><p>存放常量、静态变量、类信息；</p><h2 id="hashmap-和-hashtable-的区别-其底层实现是什么" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-的区别-其底层实现是什么" aria-hidden="true">#</a> HashMap 和 HashTable 的区别？其底层实现是什么？</h2><p>区别：</p><p>（1）HashMap 方法没有 synchronized 修饰，线程非安全，HashTable 线程安全；</p><p>（2）HashMap 允许 key 和 value 为 null，而 HashTable 不允许</p><p>底层实现：数组+链表实现</p><p>jdk8 开始链表高度到8、数组长度超过64，链表转变为红黑树，元素以内部类 Node 节点存在</p><ul><li>计算 key 的 hash 值，二次 hash 然后对数组长度取模，对应到数组下标</li><li>如果没有产生 hash 冲突（下标位置没有元素），则直接创建 Node 存入数组</li><li>如果产生 hash 冲突，先进行 equal 比较，相同则取代该元素，不同，则判断链表高度插入链表，链表高度达到 8，并且数组长度到 64 则转变为红黑树，长度低于 6 则将红黑树转回链表</li><li>key 为 null，存在下标 0 的位置</li></ul><p>数组扩容：默认扩容方式：扩容为原来的两倍，并将原有的数组复制过来。</p><h2 id="和-equals" tabindex="-1"><a class="header-anchor" href="#和-equals" aria-hidden="true">#</a> == 和 equals</h2><p>== ：对比的是<code>栈中的值</code>，<strong>基本数据类型是变量值，引用类型是堆中内存对象的地址</strong></p><p>equals：object 中默认也是采用 == 比较，通常会重写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/image-20221110181949125.png" alt="image-20221110181949125" loading="lazy"></p><h2 id="arraylist-和-linkedlist-区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-区别" aria-hidden="true">#</a> ArrayList 和 LinkedList 区别</h2><p>ArrayList：基于<code>动态数组</code>，连续内存存储，适合下标访问（随机访问），扩容机制；因为数组长度固定，超出长度存数据时需要新建数组，然后将老数组拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动（往后复制一份，插入新元素），使用尾插法并指定初始容量可以极大提升性能、甚至超过 linkedList （需要创建大量的 node 对象）</p><p>LinkedList：基于<code>链表</code>，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询，需要逐一遍历，遍历 LinkedList <code>必须使用 iterator 不能使用 for 循环</code>，因为每次 for 循环体内通过 get(i) 取得某一元素时，都需要对 list 重新进行遍历，性能消耗极大。另外不要视图使用 indexOf 等返回元素索引，并利用其进行遍历，使用 indexOf 对 list 进行了遍历，当结果为空时会遍历整个列表。</p><p>ArrayList 和 LinkedList 都实现了 List 接口，但是 LinkedList 还额外实现了 Deque 接口，所以 ListedList 还可以当做队列来实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组实现 查询快</span>
        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 扩容会变慢</span>
        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 扩容 元素移动</span>

        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 链表实现  增删快</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 耗性能的是寻找节点过程</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型中-extends-和-super-的区别" tabindex="-1"><a class="header-anchor" href="#泛型中-extends-和-super-的区别" aria-hidden="true">#</a> 泛型中 extends 和 super 的区别</h2><p><code>&lt;? extends T&gt;</code> 表示包括 T 在内的任何 T 的子类</p><p><code>&lt;? super T&gt;</code> 表示包括 T 在内的任何 T 的父类</p><h2 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝</h2><p>深拷贝和浅拷贝就是指对象的拷贝，一个对象中存在两种类型的属性， 一种是基本数据类型，一种是实例对象的引用。</p><ol><li>浅拷贝是指，只会<code>拷贝基本数据类型的值，以及实例对象的引用地址</code>，并不会复制一份<code>引用地址所指向的对象</code>，也就是浅拷贝出来的对象，<strong>内部的类属性指向的是同一个对象</strong>。</li><li>深拷贝是指，既会拷贝<code>基本数据类型的值</code>，也会针对实例对象的引用地址所指向的对象进行赋值，深拷贝出来的对象，<strong>内部的类属性指向的不是同一个对象</strong>。</li></ol><h2 id="重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#重载和重写的区别" aria-hidden="true">#</a> 重载和重写的区别</h2><p><strong>重载</strong>：发生在同一类中，<code>方法名</code>必须相同，<code>参数类型</code>不同、<code>个数</code>不同、<code>顺序</code>不同，<code>方法返回值</code>和<code>访问修饰符</code>可以不同，发生在编译时。（跟返回值没有关系）</p><p><strong>重写</strong>：发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 <strong>private</strong>，则子类就不能重写该方法。</p>`,56),c=[p];function o(i,l){return a(),s("div",null,c)}const d=n(e,[["render",o],["__file","java.html.vue"]]);export{d as default};
