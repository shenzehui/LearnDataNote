import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.f863550f.js";const p={},e=t(`<h2 id="和-equals" tabindex="-1"><a class="header-anchor" href="#和-equals" aria-hidden="true">#</a> == 和 equals</h2><p>== ：对比的是<code>栈中的值</code>，<strong>基本数据类型是变量值，引用类型是堆中内存对象的地址</strong></p><p>equals：object 中默认也是采用 == 比较，通常会重写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s1.vika.cn/space/2022/11/21/c11e1739d78546e790559d2dc2d7c601" alt="image-20221110181949125" loading="lazy"></p><h2 id="泛型中-extends-和-super-的区别" tabindex="-1"><a class="header-anchor" href="#泛型中-extends-和-super-的区别" aria-hidden="true">#</a> 泛型中 extends 和 super 的区别</h2><p><code>&lt;? extends T&gt;</code> 表示包括 T 在内的任何 T 的子类</p><p><code>&lt;? super T&gt;</code> 表示包括 T 在内的任何 T 的父类</p><h2 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝</h2><p>深拷贝和浅拷贝就是指对象的拷贝，一个对象中存在两种类型的属性， 一种是基本数据类型，一种是实例对象的引用。</p><ol><li>浅拷贝是指，只会<code>拷贝基本数据类型的值，以及实例对象的引用地址</code>，并不会复制一份<code>引用地址所指向的对象</code>，也就是浅拷贝出来的对象，<strong>内部的类属性指向的是同一个对象</strong>。</li><li>深拷贝是指，既会拷贝<code>基本数据类型的值</code>，也会针对实例对象的引用地址所指向的对象进行赋值，深拷贝出来的对象，<strong>内部的类属性指向的不是同一个对象</strong>。</li></ol><h2 id="重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#重载和重写的区别" aria-hidden="true">#</a> 重载和重写的区别</h2><p><strong>重载</strong>：发生在同一类中，<code>方法名</code>必须相同，<code>参数类型</code>不同、<code>个数</code>不同、<code>顺序</code>不同，<code>方法返回值</code>和<code>访问修饰符</code>可以不同，发生在编译时。（跟返回值没有关系）</p><p><strong>重写</strong>：发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为 <strong>private</strong>，则子类就不能重写该方法。</p>`,14),o=[e];function c(l,u){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","java-base.html.vue"]]);export{d as default};
