import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-7a87900e.js";const i={},u=n("h2",{id:"seata-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#seata-简介","aria-hidden":"true"},"#"),s(" Seata 简介")],-1),r={href:"https://seata.io/zh-cn/",target:"_blank",rel:"noopener noreferrer"},k=p('<p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/cf4d4239-7b3a-4af7-84da-21b72dc8ab1d.png" alt="" loading="lazy"></p><ul><li>TC：事务协调者（Transaction Coordinator），这个负责维护全局事务和分支事务的状态，驱动全局事务提交和回滚。</li><li>TM：事务管理器（Transaction Manager），这个是定义全局事务的范围，全局事务什么时候开启？什么时候开启？什么时候回滚？什么时候提交等等。。。</li><li>RM：资源管理器（Resource Manager），管理分支事务的资源，向 TC 注册分支事务的状态，驱动分支事务提交或者回滚。</li></ul><h3 id="自动补偿-反向补偿" tabindex="-1"><a class="header-anchor" href="#自动补偿-反向补偿" aria-hidden="true">#</a> 自动补偿/反向补偿</h3><p>例如有微服务 A、B、C，现在在 A 中分别去调用 B 和 C，为了确保 B 和 C 的调用同时成功或者同时失败，那么就要用分布式事务。假设先调用 B ，再调用 C，B 调用完成后，事务就提交了，然后调用 C ，C 出错，现在要回滚。此时 B 需要回滚，但是 B 的回滚并不是我们传统意义上所说的回滚，而是通过一条更新 SQL，将 B 中的数据复原。这个过程就叫做反向补偿。</p><h3 id="at-模式" tabindex="-1"><a class="header-anchor" href="#at-模式" aria-hidden="true">#</a> AT 模式</h3>',5),d={href:"https://seata.io/zh-cn/docs/dev/mode/at-mode.html",target:"_blank",rel:"noopener noreferrer"},v=p('<blockquote><p>大致原理说明：</p><ul><li>一阶段 通过要更新的 SQL 语句，查询出更新前的数据和更新后的数据，插入到 <code>UNDO_LOG</code> 表中，并将本地事务提交的结果上报给 TC</li><li>二阶段 <ul><li>回滚 <ol><li>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</li><li>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</li><li>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</li><li>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</li></ol></li><li>提交 <ol><li>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li><li>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给TC。</li><li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol></li></ul></li></ul></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;TXC&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>回滚日志表</strong></p><p>UNDO_LOG Table：不同数据库在类型上会略有差别。</p><p>以 MySQL 为例：</p><table><thead><tr><th>Field</th><th>Type</th></tr></thead><tbody><tr><td>branch_id</td><td>bigint PK</td></tr><tr><td>xid</td><td>varchar(100)</td></tr><tr><td>context</td><td>varchar(128)</td></tr><tr><td>rollback_info</td><td>longblob</td></tr><tr><td>log_status</td><td>tinyint</td></tr><tr><td>log_created</td><td>datetime</td></tr><tr><td>log_modified</td><td>datetime</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 注意此处0.7.0+ 增加字段 context</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>xid<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>context<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span></span> <span class="token keyword">longblob</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>log_status<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>log_created<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ux_undo_log<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>xid<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-seater-server" tabindex="-1"><a class="header-anchor" href="#安装-seater-server" aria-hidden="true">#</a> 安装 seater-server</h3><p>seater 所提供的 seater-server 本质上就是 springboot</p>',9),m={href:"https://github.com/seata/seata/releases/download/v1.5.1/seata-server-1.5.1.tar.gz",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"解压，建议解压目录不要有中文，不要有空格。",-1),g=n("li",null,"修改一下 ./bin/seata-server.sh 脚本（启动不报错不用修改）",-1),y=p('<p>注释除了<code>JAVA_OPT=&quot;${JAVA_OPT} -Xlog:gc*:file=${BASEDIR}/logs/seata_gc.log:time,tags:filecount=10,filesize=102400&quot;</code>代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">JAVA_MAJOR_VERSION</span><span class="token operator">=</span>$<span class="token punctuation">(</span>$<span class="token constant">JAVACMD</span> <span class="token operator">-</span>version <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">|</span> sed <span class="token char">&#39;1!d&#39;</span> <span class="token operator">|</span> sed <span class="token operator">-</span>e <span class="token char">&#39;s/&quot;//g&#39;</span> <span class="token operator">|</span> awk &#39;<span class="token punctuation">{</span>print $<span class="token number">3</span><span class="token punctuation">}</span>&#39; <span class="token operator">|</span> awk <span class="token operator">-</span><span class="token class-name">F</span> <span class="token char">&#39;.&#39;</span> &#39;<span class="token punctuation">{</span>print $<span class="token number">2</span><span class="token punctuation">}</span>&#39;<span class="token punctuation">)</span>\n<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">&quot;$JAVA_MAJOR_VERSION&quot;</span> <span class="token operator">-</span>ge <span class="token string">&quot;9&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> then\n  <span class="token constant">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;${JAVA_OPT} -Xlog:gc*:file=${BASEDIR}/logs/seata_gc.log:time,tags:filecount=10,filesize=102400&quot;</span>\n<span class="token keyword">else</span>\n  <span class="token constant">JAVA_OPT</span><span class="token operator">=</span><span class="token string">&quot;${JAVA_OPT} -Xloggc:${BASEDIR}/logs/seata_gc.log -verbose:gc -XX:+PrintGCDetails  -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M&quot;</span>\nfi\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),q={start:"4"},w=n("li",null,"执行 .bat 文件，启动 seata-server。",-1),f={href:"http://localhost:7091",target:"_blank",rel:"noopener noreferrer"},h=p(`<p><strong>配置文件说明：</strong><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221022172310769.png" alt="" loading="lazy"></p><ul><li>applictaion.example.yml：是全部配置文件</li><li>application.yml：是当前项目的配置文件</li></ul><h3 id="分布式事务-at-模式-实战" tabindex="-1"><a class="header-anchor" href="#分布式事务-at-模式-实战" aria-hidden="true">#</a> 分布式事务 AT 模式 实战</h3><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/architecture.png" alt="" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StorageFeign</span> storageFeign<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderFeign</span> orderFeign<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GlobalTransactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderFeign<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        storageFeign<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两个调用做到同时成功，同时失败</strong></p><p><code>@GlobalTransactional</code> 相当于 TM</p><p>undo_log 表记录生成时机：当一个事务还没有回滚时，会先将数据库记录保存在 <code>undo_log</code> 中</p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221022202914454.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221022203015003.png" alt="" loading="lazy"></p><p><strong>rollback_info 数据</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.undo.BranchUndoLog&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;xid&quot;</span><span class="token operator">:</span><span class="token string">&quot;192.168.88.1:8091:72377057366732804&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;branchId&quot;</span><span class="token operator">:</span><span class="token number">72377057366732805</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sqlUndoLogs&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.undo.SQLUndoLog&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;sqlType&quot;</span><span class="token operator">:</span><span class="token string">&quot;UPDATE&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;tableName&quot;</span><span class="token operator">:</span><span class="token string">&quot;account_tbl&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;beforeImage&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.TableRecords&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;tableName&quot;</span><span class="token operator">:</span><span class="token string">&quot;account_tbl&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
                        <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token punctuation">{</span>
                                <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Row&quot;</span><span class="token punctuation">,</span>
                                <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
                                    <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span>
                                    <span class="token punctuation">[</span>
                                        <span class="token punctuation">{</span>
                                            <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Field&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;keyType&quot;</span><span class="token operator">:</span><span class="token string">&quot;PRIMARY_KEY&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token number">1</span>
                                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                        <span class="token punctuation">{</span>
                                            <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Field&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;keyType&quot;</span><span class="token operator">:</span><span class="token string">&quot;NULL&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token number">998800</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">]</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;afterImage&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.TableRecords&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;tableName&quot;</span><span class="token operator">:</span><span class="token string">&quot;account_tbl&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
                        <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">[</span>
                            <span class="token punctuation">{</span>
                                <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Row&quot;</span><span class="token punctuation">,</span>
                                <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
                                    <span class="token string">&quot;java.util.ArrayList&quot;</span><span class="token punctuation">,</span>
                                    <span class="token punctuation">[</span>
                                        <span class="token punctuation">{</span>
                                            <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Field&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;keyType&quot;</span><span class="token operator">:</span><span class="token string">&quot;PRIMARY_KEY&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token number">1</span>
                                        <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                        <span class="token punctuation">{</span>
                                            <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span><span class="token string">&quot;io.seata.rm.datasource.sql.struct.Field&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;keyType&quot;</span><span class="token operator">:</span><span class="token string">&quot;NULL&quot;</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>
                                            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token number">898800</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">]</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多数据源处理事务" tabindex="-1"><a class="header-anchor" href="#多数据源处理事务" aria-hidden="true">#</a> 多数据源处理事务</h3><ul><li>添加依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置文件</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
 <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>
      <span class="token key atrule">seata</span><span class="token punctuation">:</span>
        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> my_test_tx_group
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-circular-references</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> dd

<span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable-auto-data-source-proxy</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加 file.conf 和  registry.conf 文件</li></ul><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023120820594.png" alt="" loading="lazy"></p><ul><li>加载 seata 提供的 DataSourceProxy 数据源</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//加载所有的数据源</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadAllDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ds <span class="token operator">=</span> druidProperties<span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> druidProperties<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span><span class="token punctuation">)</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>切面类方法错误应当抛出异常，让 seata 捕获回滚</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;pc()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取方法上面的有效注解</span>
    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取注解中数据源的名称</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存到ThreadLocal中去</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清除ThreadLocal中的数据源名称</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlaveService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">SlaveMapper</span> slaveMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">&quot;slave&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        slaveMapper<span class="token punctuation">.</span><span class="token function">updateUserAge</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行后两次不同数据源的操作都会回滚</strong></p><h3 id="tcc-模式" tabindex="-1"><a class="header-anchor" href="#tcc-模式" aria-hidden="true">#</a> TCC 模式</h3>`,27),S={href:"https://seata.io/zh-cn/docs/dev/mode/tcc-mode.html",target:"_blank",rel:"noopener noreferrer"},x=p(`<p>Try Confirm Cancel（TCC），也是基于两阶段提交发展出来的分布式事务处理方案。</p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/seata_tcc-1.png" alt="" loading="lazy"></p><h3 id="tcc-实战" tabindex="-1"><a class="header-anchor" href="#tcc-实战" aria-hidden="true">#</a> TCC 实战</h3><ul><li>在 common 模块添加依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建三个 Feign 客户端</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@LocalTCC</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountServiceApi</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 这是一阶段操作
     * 这个方法用来检查资源，例如检查账户是否存在，检查账户余额是充足，余额充足的话，就冻结余额
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * prepare 是开发者手动调用的，commit 或者 rollback 则是 seata 根据（所有的） prepare 执行的情况，自动调用的。
     *
     * <span class="token keyword">@return</span>
     * @TwoPhaseBusinessAction 两阶段提交，指定实例名称，两阶段提交方法名，两阶段回滚方法名
     * BusinessActionContext 分布式事务执行的时候的上下文，可以用来存放参数，用于参数传递
     * @BusinessActionContextParameter(paramName = &quot;money&quot;) 将该参数以 paramName 为 key 存放到 BusinessActionContext 中
     */</span>
    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;accountServiceApi&quot;</span><span class="token punctuation">,</span> commitMethod <span class="token operator">=</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">,</span> rollbackMethod <span class="token operator">=</span> <span class="token string">&quot;rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/account/deduct/prepare&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 这是二阶段的提交（返回值必须为 boolean 类型）
     * 真正的提交操作在这里完成，主要是扣款操作（操作冻结的金额即可）
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/account/deduct/commit&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 这是二阶段的回滚操作（返回值必须为 boolean 类型）
     * 回滚不要是将冻结的金额复原
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/account/deduct/rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@LocalTCC</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderServiceApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;orderServiceApi&quot;</span><span class="token punctuation">,</span> commitMethod <span class="token operator">=</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">,</span> rollbackMethod <span class="token operator">=</span> <span class="token string">&quot;rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order/create/prepare&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order/create/commit&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order/create/rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@LocalTCC</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageServiceApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;storageServiceApi&quot;</span><span class="token punctuation">,</span> commitMethod <span class="token operator">=</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">,</span> rollbackMethod <span class="token operator">=</span> <span class="token string">&quot;rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/storage/deduct/prepare&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;storage/deduct/commit&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;storage/deduct/rollback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实体类定义</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> freezeMoney<span class="token punctuation">;</span>
	<span class="token comment">// 此处省略 getter and setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountController 实现 AccountServiceApi 接口，并处理自己的业务逻辑</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token keyword">implements</span> <span class="token class-name">AccountServiceApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountService<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountService 完成 prepare commit rollback 业务逻辑</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AccountService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccountMapper</span> accountMapper<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 这里实际上是准备工作，也是分布式事务一阶段的工作
     * 这个时候主要检查一下账户是否存在，检查一下余额是否充足，把要扣的钱先冻结起来
     *
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">money</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">getAccountByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>account <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;账户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;账户余额不足，预扣款失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//先把钱冻结起来</span>
        account<span class="token punctuation">.</span><span class="token function">setFreezeMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 账户预扣款 {} 元&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 二阶段 commit 操作
     * 实际扣款阶段
     *
     * <span class="token keyword">@param</span> <span class="token parameter">actionContext</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取 prepare 阶段的两个参数</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">getAccountByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;账户余额不足，扣款失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        account<span class="token punctuation">.</span><span class="token function">setFreezeMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 账户扣款 {} 元&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 二阶段回滚
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 主要是把冻结的钱释放
     *
     * <span class="token keyword">@param</span> <span class="token parameter">actionContext</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取 prepare 阶段的两个参数</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Account</span> account <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">getAccountByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            account<span class="token punctuation">.</span><span class="token function">setFreezeMoney</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> i <span class="token operator">=</span> accountMapper<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 账户释放冻结金额 {} 元&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 账户冻结金额已释放&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>AccountMapper</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">&quot;update account_tbl set money = #{money},freezeMoney=#{freezeMoney} where userId = #{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from account_tbl where userId = #{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Account</span> <span class="token function">getAccountByUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>order 模块 Feign 客户端</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;account&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountServiceApiImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AccountServiceApi</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>OrderController</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token keyword">implements</span> <span class="token class-name">OrderServiceApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>OrderService</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">OrderService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderMapper</span> orderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AccountServiceApi</span> accountServiceApi<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//先去扣款，假设每个产品 100 元</span>
        <span class="token keyword">boolean</span> prepare <span class="token operator">=</span> accountServiceApi<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> count <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 用户购买了 {} 商品，共计 {} 件，预下单成功&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> prepare<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> productId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">addOrder</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">,</span>count<span class="token operator">*</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 用户购买了 {} 商品，共计 {} 件，下单成功&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> productId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 用户购买了 {} 商品，共计 {} 件，订单回滚成功&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>OrderMapper</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into order_tbl(userId,productId,count,money) values(#{userId},#{productId},#{count},#{money})&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>
                     <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span>
                     <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count<span class="token punctuation">,</span>
                     <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Storage 实体类</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> productId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> freezeCount<span class="token punctuation">;</span>
    <span class="token comment">//此处省略 getter and setter...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>StorageController</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageController</span> <span class="token keyword">implements</span> <span class="token class-name">StorageServiceApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storageService<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storageService<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storageService<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>StorageService</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">StorageService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StorageMapper</span> storageMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Storage</span> storage <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">getStorageByProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;商品不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足，预扣库存失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        storage<span class="token punctuation">.</span><span class="token function">setFreezeCount</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getFreezeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        storage<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">updateStorage</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 商品库存冻结 {} 个&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> productId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Storage</span> storage <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">getStorageByProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getFreezeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足，扣库存失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        storage<span class="token punctuation">.</span><span class="token function">setFreezeCount</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getFreezeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">updateStorage</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 商品扣库存 {} 个&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> actionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> productId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;productId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> actionContext<span class="token punctuation">.</span><span class="token function">getActionContext</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Storage</span> storage <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">getStorageByProductId</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getFreezeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            storage<span class="token punctuation">.</span><span class="token function">setFreezeCount</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getFreezeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            storage<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> i <span class="token operator">=</span> storageMapper<span class="token punctuation">.</span><span class="token function">updateStorage</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 商品释放库存 {} 个&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 商品冻结的库存已释放&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>StorageMapper</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageMapper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from storage_tbl where productId=#{productId} &quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Storage</span> <span class="token function">getStorageByProductId</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">&quot;update storage_tbl set count=#{count},freezeCount=#{freezeCount} where productId=#{productId}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Integer</span> <span class="token function">updateStorage</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Business 模块</strong></p><ul><li>定义 order 和 storage Feign 客户端</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderServiceApiImpl</span> <span class="token keyword">extends</span> <span class="token class-name">OrderServiceApi</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageServiceApiImpl</span> <span class="token keyword">extends</span> <span class="token class-name">StorageServiceApi</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BusinessService</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">StorageServiceApi</span> storageServiceApi<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">OrderServiceApi</span> orderServiceApi<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GlobalTransactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> xid <span class="token operator">=</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取全局事务 ID</span>
        <span class="token class-name">BusinessActionContext</span> actionContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BusinessActionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        actionContext<span class="token punctuation">.</span><span class="token function">setXid</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderServiceApi<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> account<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        storageServiceApi<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BusinessController</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">BusinessService</span> businessService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">RespBean</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">,</span> <span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            businessService<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">RespBean</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;下单成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">RespBean</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;下单失败&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>成功测试：</strong></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160416819.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160322751.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160345209.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160358026.png" alt="" loading="lazy"></p><p><strong>失败测试：</strong></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160448206.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160612148.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023160630430.png" alt="" loading="lazy"></p><h3 id="xa" tabindex="-1"><a class="header-anchor" href="#xa" aria-hidden="true">#</a> XA</h3><p>XA 模式是 X/Open 组织定义的分布式事务处理标准。</p><p>XA 规范描述了全局的事务管理器与局部的资源管理器之间的接口，利用 XA 规范可以实现多个资源，例如数据库、MQ 等，在同一个事务中进行访问，这样就可以使得数据库的 ACID 属性在跨应用的时候依然有效。</p><p>目前所有主流的数据库基本上都支持 XA 协议，包括 MySQL，</p><p>MySQL 中的 XA 事务分为两种：</p><ul><li>内部 XA：内部 XA 可以用作同一个 MySQL 实例下，跨多个引擎的事务，这种一般使用 binlog 作为协调者。</li><li>外部 XA：外部 XA 可以参与到外部的分布式事务中，这种一般需要应用层介入作为协调者。</li></ul><p><strong>XA 在 MYSQL 中的应用</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>xa <span class="token keyword">start</span> <span class="token string">&quot;事务名称&quot;</span><span class="token punctuation">;</span>  <span class="token comment">## 开启分布式事务</span>
<span class="token keyword">update</span> <span class="token keyword">delete</span> <span class="token keyword">insert</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
xa <span class="token keyword">end</span> <span class="token string">&quot;事务名称&quot;</span>； <span class="token comment">## 结束分布式事务  //事务处于 IDLE 状态</span>
xa <span class="token keyword">prepare</span> <span class="token string">&quot;事务名称&quot;</span>  <span class="token comment">## 一阶段结束（给协调者报告状态）  这一步可以省略，可以直接提交，但后面要加 ONE PHASE; xa commit ONE PHASE 一阶段直接提交</span>
xa <span class="token keyword">commit</span> <span class="token string">&quot;事务名称&quot;</span> <span class="token operator">/</span> xa <span class="token keyword">rollback</span> <span class="token string">&quot;事务名称&quot;</span> <span class="token comment">## 二阶段结束</span>
xa recouver <span class="token comment"># 可以查看所有处于 prepare 中的事务</span>

xa <span class="token keyword">rollback</span> <span class="token string">&quot;截取前gtrid_length个字符的data&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dara被截取后的剩余字符&quot;</span><span class="token punctuation">,</span>formatID <span class="token comment">## 回滚完整命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>XA 在 Seata 中的应用</strong></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221106184937218.png" alt="" loading="lazy"></p><ol><li>首先 TM 开启全局的分布式事务。</li><li>不同的微服务开始执行，各个微服务（RM）依次执行 xa start-&gt;SQL-&gt;xa end-&gt;xa prepare，这是一阶段的操作。</li><li>在一阶段的操作中，xa prepare 会将当前分支事务的状态报告给 TC。</li><li>TC 判断一下，各个分支事务都执行成功了，此时就通知各个分支事务提交，如果分支事务中有人执行失败，那么此时就通知各个分支事务一起回滚（真正的回滚）。</li></ol><h3 id="xa-实战" tabindex="-1"><a class="header-anchor" href="#xa-实战" aria-hidden="true">#</a> XA 实战</h3><p><code>MySQL 版本统一使用 8.0.11，据说其他会出错</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>不需要再添加 druid 依赖</code></p><p><strong>凡是涉及到数据库操作的都需要关闭数据代理</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">seata.enable-auto-data-source-proxy</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>数据源配置（替换成 DataSourceProxyXA）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;dataSourceProxy&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Primary</span> <span class="token comment">//这里因为 Spring 容器中存在两个 DataSource，@Primary 作用是当容器中存在多个时，优先使用以下数据源</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span> druidDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxyXA</span><span class="token punctuation">(</span>druidDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XA 模式数据源，只要换上这种数据源，就自动开启了 XA 模式</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//配置 MyBatis</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSessionFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">setTransactionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在启动类上排除 <strong><code>**DataSourceAutoConfiguration.class**</code></strong> 声明数据源无需再配置</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">&quot;org.javaboy&quot;</span><span class="token punctuation">,</span> exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AccountApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),A={href:"http://localhost:1112/order?account=javaboy&count=10&productId=1111",target:"_blank",rel:"noopener noreferrer"},C=p('<p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023192027570.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023192100514.png" alt="" loading="lazy"></p><p><img src="https://javablog-image.oss-cn-hangzhou.aliyuncs.com/blog/image-20221023192143326.png" alt="" loading="lazy"></p><blockquote><p>跟 AT 相比，只要切换成 XA 数据源即可，但有些版本问题需要注意！！！</p></blockquote><h3 id="分布式事务总结" tabindex="-1"><a class="header-anchor" href="#分布式事务总结" aria-hidden="true">#</a> 分布式事务总结</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/29665700/1683014304892-96451dc7-99db-44a8-ad42-4c5338d9e125.jpeg" alt="" loading="lazy"></p>',6);function I(j,_){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("seata 官网："),n("a",r,[s("https://seata.io/zh-cn/"),t(a)])]),k,n("ul",null,[n("li",null,[n("a",d,[s("https://seata.io/zh-cn/docs/dev/mode/at-mode.html"),t(a)])])]),v,n("ol",null,[n("li",null,[s("下载 seater-server："),n("a",m,[s("https://github.com/seata/seata/releases/download/v1.5.1/seata-server-1.5.1.tar.gz"),t(a)])]),b,g]),y,n("ol",q,[w,n("li",null,[s("启动之后，浏览器输入 "),n("a",f,[s("http://localhost:7091"),t(a)]),s("，进入 seata 管理页面")])]),h,n("p",null,[n("a",S,[s("https://seata.io/zh-cn/docs/dev/mode/tcc-mode.html"),t(a)])]),x,n("p",null,[s("post请求："),n("a",A,[s("http://localhost:1112/order?account=javaboy&count=10&productId=1111"),t(a)])]),C])}const T=e(i,[["render",I],["__file","transaction.html.vue"]]);export{T as default};
