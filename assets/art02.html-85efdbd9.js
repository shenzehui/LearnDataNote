import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as n,b as s,e as i,d as c}from"./app-8415f43e.js";const l={},u={href:"https://juejin.cn/post/6916150628955717646",target:"_blank",rel:"noopener noreferrer"},r=c(`<h3 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h3><p>要实现认证功能，很容易就会想到JWT或者session，但是两者有啥区别？各自的优缺点？应该Pick谁？夺命三连</p><p><img src="https://s1.vika.cn/space/2022/11/26/ca24a490d0334e3b8593c8a0e725baa5" alt="img" loading="lazy"></p><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h4><p>基于session和基于JWT的方式的主要区别就是用户的状态保存的位置，<strong>session是保存在服务端</strong>的，而<strong>JWT是保存在客户端</strong>的</p><h4 id="认证流程" tabindex="-1"><a class="header-anchor" href="#认证流程" aria-hidden="true">#</a> 认证流程</h4><h5 id="基于session的认证流程" tabindex="-1"><a class="header-anchor" href="#基于session的认证流程" aria-hidden="true">#</a> 基于session的认证流程</h5><ul><li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个session并保存到数据库</li><li>服务器为用户生成一个sessionId，并将具有sesssionId的cookie放置在用户浏览器中，在后续的请求中都将带有这个cookie信息进行访问</li><li>服务器获取cookie，通过获取cookie中的sessionId查找数据库判断当前请求是否有效</li></ul><h5 id="基于jwt的认证流程" tabindex="-1"><a class="header-anchor" href="#基于jwt的认证流程" aria-hidden="true">#</a> 基于JWT的认证流程</h5><ul><li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个token并保存到数据库</li><li>前端获取到token，存储到cookie或者local storage中，在后续的请求中都将带有这个token信息进行访问</li><li>服务器获取token值，通过查找数据库判断当前token是否有效</li></ul><h4 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h4><ul><li>JWT保存在客户端，在分布式环境下不需要做额外工作。而session因为保存在服务端，分布式环境下需要实现多机数据共享</li><li>session一般需要结合Cookie实现认证，所以需要浏览器支持cookie，因此移动端无法使用session认证方案</li></ul><h5 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性" aria-hidden="true">#</a> 安全性</h5><ul><li>JWT的payload使用的是base64编码的，因此在<strong>JWT中不能存储敏感数据</strong>。而session的信息是存在服务端的，相对来说更安全</li></ul><p><img src="https://s1.vika.cn/space/2022/11/26/dd5f08e622c84c02b12897686d7b4b35" alt="image.png" loading="lazy"></p><p>如果在JWT中存储了敏感信息，可以解码出来非常的不安全</p><h5 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h5><ul><li>经过编码之后JWT将非常长，cookie的限制大小一般是4k，cookie很可能放不下，所以JWT一般放在local storage里面。并且用户在系统中的每一次http请求都会把JWT携带在Header里面，HTTP请求的Header可能比Body还要大。而sessionId只是很短的一个字符串，因此使用JWT的HTTP请求比使用session的开销大得多</li></ul><h5 id="一次性" tabindex="-1"><a class="header-anchor" href="#一次性" aria-hidden="true">#</a> 一次性</h5><p>无状态是JWT的特点，但也导致了这个问题，JWT是一次性的。想修改里面的内容，就必须签发一个新的JWT</p><ul><li>无法废弃 一旦签发一个JWT，在到期之前就会始终有效，无法中途废弃。若想废弃，一种常用的处理手段是结合redis</li><li>续签 如果使用JWT做会话管理，传统的cookie续签方案一般都是框架自带的，session有效期30分钟，30分钟内如果有访问，有效期被刷新至30分钟。一样的道理，要改变JWT的有效时间，就要签发新的JWT。最简单的一种方式是每次请求刷新JWT，即每个HTTP请求都返回一个新的JWT。这个方法不仅暴力不优雅，而且每次请求都要做JWT的加密解密，会带来性能问题。另一种方法是在redis中单独为每个JWT设置过期时间，每次访问时刷新JWT的过期时间</li></ul><h4 id="选择jwt或session" tabindex="-1"><a class="header-anchor" href="#选择jwt或session" aria-hidden="true">#</a> 选择JWT或session</h4><p>我投JWT一票，JWT有很多缺点，但是在分布式环境下不需要像session一样额外实现多机数据共享，虽然seesion的多机数据共享可以通过<strong>粘性session</strong>、<strong>session共享</strong>、<strong>session复制</strong>、<strong>持久化session</strong>、<strong>terracoa实现seesion复制</strong>等多种成熟的方案来解决这个问题。但是JWT不需要额外的工作，使用JWT不香吗？且JWT一次性的缺点可以结合redis进行弥补。扬长补短，因此在实际项目中选择的是使用JWT来进行认证</p><h3 id="功能实现" tabindex="-1"><a class="header-anchor" href="#功能实现" aria-hidden="true">#</a> 功能实现</h3><h4 id="jwt所需依赖" tabindex="-1"><a class="header-anchor" href="#jwt所需依赖" aria-hidden="true">#</a> JWT所需依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jwt工具类" tabindex="-1"><a class="header-anchor" href="#jwt工具类" aria-hidden="true">#</a> JWT工具类</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> final Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JWTUtil<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//私钥</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> final String <span class="token constant">TOKEN_SECRET</span> <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 生成token，自定义过期时间 毫秒
     *
     * <span class="token keyword">@param</span> <span class="token parameter">userTokenDTO</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>UserTokenDTO userTokenDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 私钥和加密算法</span>
            Algorithm algorithm <span class="token operator">=</span> Algorithm<span class="token punctuation">.</span><span class="token constant">HMAC256</span><span class="token punctuation">(</span><span class="token constant">TOKEN_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 设置头部信息</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap<span class="token operator">&lt;</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jwt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userTokenDTO<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment">//.withExpiresAt(date)</span>
                    <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;generate token occur error, error is:{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 检验token是否正确
     *
     * <span class="token keyword">@param</span> <span class="token parameter">token</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> UserTokenDTO <span class="token function">parseToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Algorithm algorithm <span class="token operator">=</span> Algorithm<span class="token punctuation">.</span><span class="token constant">HMAC256</span><span class="token punctuation">(</span><span class="token constant">TOKEN_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JWTVerifier verifier <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DecodedJWT jwt <span class="token operator">=</span> verifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String tokenInfo <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>tokenInfo<span class="token punctuation">,</span> UserTokenDTO<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>生成的token中不带有过期时间，token的过期时间由redis进行管理</li><li>UserTokenDTO中不带有敏感信息，如password字段不会出现在token中</li></ul><h4 id="redis工具类" tabindex="-1"><a class="header-anchor" href="#redis工具类" aria-hidden="true">#</a> Redis工具类</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> final <span class="token keyword">class</span> <span class="token class-name">RedisServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 过期时长
     */</span>
    <span class="token keyword">private</span> final Long <span class="token constant">DURATION</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> 1000L<span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Resource</span></span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span> valueOperations<span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">PostConstruct</span></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        RedisSerializer redisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>redisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token constant">DURATION</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;key={}, value is: {} into redis cache&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String redisValue <span class="token operator">=</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get from redis, value is: {}&quot;</span><span class="token punctuation">,</span> redisValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> <span class="token builtin">boolean</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">boolean</span> result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;delete from redis, key is: {}&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> Long <span class="token function">getExpireTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> valueOperations<span class="token punctuation">.</span><span class="token function">getOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedisTemplate简单封装</p><h4 id="业务实现" tabindex="-1"><a class="header-anchor" href="#业务实现" aria-hidden="true">#</a> 业务实现</h4><h5 id="登陆功能" tabindex="-1"><a class="header-anchor" href="#登陆功能" aria-hidden="true">#</a> 登陆功能</h5><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>public String <span class="token function">login</span><span class="token punctuation">(</span>LoginUserVO loginUserVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.判断用户名密码是否正确</span>
    UserPO userPO = userMapper.<span class="token function">getByUsername</span><span class="token punctuation">(</span>loginUserVO.<span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    if <span class="token punctuation">(</span>userPO <span class="token operator">==</span> <span class="token null keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        throw new <span class="token function">UserException</span><span class="token punctuation">(</span>ErrorCodeEnum.TNP1001001<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    if <span class="token punctuation">(</span>!loginUserVO.<span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.<span class="token function">equals</span><span class="token punctuation">(</span>userPO.<span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        throw new <span class="token function">UserException</span><span class="token punctuation">(</span>ErrorCodeEnum.TNP1001002<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//2.用户名密码正确生成token</span>
    UserTokenDTO userTokenDTO = new <span class="token function">UserTokenDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PropertiesUtil.<span class="token function">copyProperties</span><span class="token punctuation">(</span>userTokenDTO<span class="token punctuation">,</span> loginUserVO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userTokenDTO.<span class="token function">setId</span><span class="token punctuation">(</span>userPO.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userTokenDTO.<span class="token function">setGmtCreate</span><span class="token punctuation">(</span>System.<span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String token = JWTUtil.<span class="token function">generateToken</span><span class="token punctuation">(</span>userTokenDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3.存入token至redis</span>
    redisService.<span class="token function">set</span><span class="token punctuation">(</span>userPO.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    return token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>判断用户名密码是否正确</li><li>用户名密码正确则生成token</li><li>将生成的token保存至redis</li></ul><h5 id="登出功能" tabindex="-1"><a class="header-anchor" href="#登出功能" aria-hidden="true">#</a> 登出功能</h5><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">public</span> <span class="token builtin">boolean</span> <span class="token function">loginOut</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token builtin">boolean</span> result <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserException</span><span class="token punctuation">(</span>ErrorCodeEnum<span class="token punctuation">.</span><span class="token constant">TNP1001003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将对应的key删除即可</p><h5 id="更新密码功能" tabindex="-1"><a class="header-anchor" href="#更新密码功能" aria-hidden="true">#</a> 更新密码功能</h5><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>public String <span class="token function">updatePassword</span><span class="token punctuation">(</span>UpdatePasswordUserVO updatePasswordUserVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1.修改密码</span>
    UserPO userPO = UserPO.<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.<span class="token function">password</span><span class="token punctuation">(</span>updatePasswordUserVO.<span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            .<span class="token function">id</span><span class="token punctuation">(</span>updatePasswordUserVO.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            .<span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UserPO user = userMapper.<span class="token function">getById</span><span class="token punctuation">(</span>updatePasswordUserVO.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    if <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token null keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        throw new <span class="token function">UserException</span><span class="token punctuation">(</span>ErrorCodeEnum.TNP1001001<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    if <span class="token punctuation">(</span>userMapper.<span class="token function">updatePassword</span><span class="token punctuation">(</span>userPO<span class="token punctuation">)</span> <span class="token operator">!=</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        throw new <span class="token function">UserException</span><span class="token punctuation">(</span>ErrorCodeEnum.TNP1001005<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2.生成新的token</span>
    UserTokenDTO userTokenDTO = UserTokenDTO.<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            .<span class="token function">id</span><span class="token punctuation">(</span>updatePasswordUserVO.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            .<span class="token function">username</span><span class="token punctuation">(</span>user.<span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            .<span class="token function">gmtCreate</span><span class="token punctuation">(</span>System.<span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>.<span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    String token = JWTUtil.<span class="token function">generateToken</span><span class="token punctuation">(</span>userTokenDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3.更新token</span>
    redisService.<span class="token function">set</span><span class="token punctuation">(</span>user.<span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    return token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明： 更新用户密码时需要重新生成新的token，并将新的token返回给前端，由前端更新保存在local storage中的token，同时更新存储在redis中的token，这样实现可以避免用户重新登陆，用户体验感不至于太差</p><h5 id="其他说明" tabindex="-1"><a class="header-anchor" href="#其他说明" aria-hidden="true">#</a> 其他说明</h5><ul><li>在实际项目中，用户分为普通用户和管理员用户，只有管理员用户拥有删除用户的权限，这一块功能也是涉及token操作的，但是我太懒了，demo工程就不写了</li><li>在实际项目中，密码传输是加密过的</li></ul><h4 id="拦截器类" tabindex="-1"><a class="header-anchor" href="#拦截器类" aria-hidden="true">#</a> 拦截器类</h4><div class="language-vbscript line-numbers-mode" data-ext="vbscript"><pre class="language-vbscript"><code>public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
                             Object handler) throws Exception {
    String authToken = request.getHeader(&quot;Authorization&quot;);
    String token = authToken.substring(&quot;Bearer&quot;.length() + 1).trim();
    UserTokenDTO userTokenDTO = JWTUtil.parseToken(token);
    //1.判断请求是否有效
    if (redisService.get(userTokenDTO.getId()) == null 
            || !redisService.get(userTokenDTO.getId()).equals(token)) {
        return false;
    }

    //2.判断是否需要续期
    if (redisService.getExpireTime(userTokenDTO.getId()) &lt; 1 * 60 * 30) {
        redisService.set(userTokenDTO.getId(), token);
        log.error(&quot;update token info, id is:{}, user info is:{}&quot;, userTokenDTO.getId(), token);
    }
    return true;
}
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明： 拦截器中主要做两件事，一是对token进行校验，二是判断token是否需要进行续期 token校验：</p><ul><li>判断id对应的token是否不存在，不存在则token过期</li><li>若token存在则比较token是否一致，保证同一时间只有一个用户操作</li></ul><p>token自动续期： 为了不频繁操作redis，只有当离过期时间只有30分钟时才更新过期时间</p><h4 id="拦截器配置类" tabindex="-1"><a class="header-anchor" href="#拦截器配置类" aria-hidden="true">#</a> 拦截器配置类</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Configuration</span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">authenticateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/logout/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/login/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Bean</span></span>
    <span class="token keyword">public</span> AuthenticateInterceptor <span class="token function">authenticateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticateInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h4><p>若有纰漏不足，欢迎指出</p><p><img src="https://s1.vika.cn/space/2022/11/26/6e388d9d96f34c5bbbc8213a4d2b23d2" alt="img" loading="lazy"></p><p><strong>点个赞</strong>在走</p><h2 id="公众号" tabindex="-1"><a class="header-anchor" href="#公众号" aria-hidden="true">#</a> 公众号</h2><p><img src="https://s1.vika.cn/space/2022/12/01/f1f467dd3b8e4984a50dce782aa346ff" alt="" loading="lazy"></p>`,59);function d(k,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[n("blockquote",null,[n("p",null,[s("过去这段时间主要负责了项目中的用户管理模块，用户管理模块会涉及到加密及认证流程，加密已经在前面的文章中介绍了，可以阅读"),n("a",u,[s("用户管理模块：如何保证用户数据安全"),i(a)]),s("。今天就来讲讲认证功能的技术选型及实现。技术上没啥难度当然也没啥挑战，但是对一个原先没写过认证功能的菜鸡甜来说也是一种锻炼吧")])]),r])}const g=t(l,[["render",d],["__file","art02.html.vue"]]);export{g as default};
