import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a,b as n,e,d as i,r as c}from"./app.435c66a3.js";const l={},r=a("h2",{id:"如何理解-ioc",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何理解-ioc","aria-hidden":"true"},"#"),n(" 如何理解 IoC")],-1),u={href:"https://www.martinfowler.com/articles/injection.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.iteye.com/blog/jinnianshilongnian-1413846",target:"_blank",rel:"noopener noreferrer"},k=i(`<h3 id="spring-bean是什么" tabindex="-1"><a class="header-anchor" href="#spring-bean是什么" aria-hidden="true">#</a> Spring Bean是什么</h3><blockquote><p>IoC Container 管理的是 Spring Bean，那么 Spring Bean 是什么？</p></blockquote><p>Spring 里面的 bean 就类似是定义的一个组件，而这个组件的作用就是实现某个功能的，这里所定义的 bean 就相当于给了你一个更为简便的方法来调用这个组件来实现你要完成的功能。</p><h3 id="ioc-是什么" tabindex="-1"><a class="header-anchor" href="#ioc-是什么" aria-hidden="true">#</a> IoC 是什么</h3><blockquote><p>IoC—Inversion of Control，即“控制反转”，<strong>不是什么技术，而是一种设计思想</strong>。在 Java 开发中，Ioc 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p></blockquote><p>我们来深入分析一下：</p><ul><li><strong>谁控制谁，控制什么？</strong></li></ul><p>传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IoC 是由专门一个容器来创建这些对象，即由 IoC 容器来控制对象的创建；谁控制谁？当然是 IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p><ul><li><strong>为何是反转，哪些方面反转了？</strong></li></ul><p>有反转就有正传，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接收依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><ul><li><strong>用图例说明一下？</strong></li></ul><p>传统程序设计下，都是主动去创建相关对象然后再组合起来：</p><p><img src="https://s1.vika.cn/space/2022/12/02/9c43fd1b4b0b45bd93d86b3c9039ab5a" alt="img" loading="lazy"></p><p>当有了 IoC/DI 的容器后，在客户端中不再主动去创建这些对象了，如图</p><p><img src="https://s1.vika.cn/space/2022/12/02/f0a23a7395214d9facb57e2b1629e0f4" alt="img" loading="lazy"></p><h3 id="ioc-能做什么" tabindex="-1"><a class="header-anchor" href="#ioc-能做什么" aria-hidden="true">#</a> IoC 能做什么</h3><blockquote><p>IoC <strong>不是一种技术，只是一种思想</strong>，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。</p></blockquote><p>传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了 IoC 容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实 IoC 对编程带来的最大改变不是代码上，而是从思想上，发送了“主从换位”的变化。应用程序原本是老大 ，要获取什么资源都是主动出击，但是在 IoC/DI 思想中，应用程序就编程被动了，被动的等待 IoC 容器来创建并注入它所需要的资源了。</p><p>IoC 很好的体现了面向对象设计法则之一— 好莱坞法则：“别找我们，我们找你”；即由 IoC 容器帮对象找响应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="ioc-和-di-是什么关系" tabindex="-1"><a class="header-anchor" href="#ioc-和-di-是什么关系" aria-hidden="true">#</a> IoC 和 DI 是什么关系</h3><p>DI—Dependency Injection，即依赖注入：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖注入到组件之中。依赖注入的目的并非为软件系统带来更多的功能，而是为了提升组件重用的频率，并为系统搭建一个灵活，可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关系具体的资源来自何处，由谁实现。</p><p>我们来深入分析一下：</p><ul><li><strong>谁依赖于谁？</strong></li></ul><p>当然是应用程序依赖于 IoC 容器；</p><ul><li><strong>为什么需要依赖？</strong></li></ul><p>应用程序需要 IoC 容器来提供对象需要的外部资源；</p><ul><li><strong>谁注入谁？</strong></li></ul><p>很明显是 IoC 容器注入应用程序某个对象，应用程序依赖的对象；</p><ul><li><strong>注入了什么？</strong></li></ul><p>就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p><ul><li><strong>IoC 和 DI 有什么关系？</strong></li></ul><p>其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器这一个层面，很难让人想到谁来维护对象关系），所以 2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对 IoC 而言，“依赖注入“明确描述了”被注入对象依赖 IoC 容器配置依赖对象”。通俗来说就是 <strong>IoC 是设计思想，ID 是实现方式。</strong></p><h2 id="ioc-配置的三种方式" tabindex="-1"><a class="header-anchor" href="#ioc-配置的三种方式" aria-hidden="true">#</a> IoC 配置的三种方式</h2><blockquote><p>总体上目前的主流方式是 <strong>注解 + Java 配置</strong>。</p></blockquote><h3 id="xml-配置" tabindex="-1"><a class="header-anchor" href="#xml-配置" aria-hidden="true">#</a> xml 配置</h3><p>顾名思义，就是将 bean 的信息配置 xml 文件里，通过 Spring 加载文件为我们创建 bean，这种方式出现很多早前的 SSM 项目中，将第三方类库或者一些配置工具类都以这种方式进行配置，主要原因是由于第三方列不支持 Spring 注解。</p><ul><li>优点：可以使用于任何场景，结构清晰，通俗易懂</li><li>缺点：配置繁琐，不易维护，枯燥无味，扩展性差</li></ul><p>举例：</p><ol><li><p>配置 xx.xml 文件</p></li><li><p>声明命名看空间和配置 bean</p></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- services --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tech.pdai.springframework.service.UserServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- more bean definitions for services go here --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-配置" tabindex="-1"><a class="header-anchor" href="#java-配置" aria-hidden="true">#</a> Java 配置</h3><p>将类的创建交给我们配置的 JavaConfig 类来完成，Spring 只负责维护和管理，采用纯 Java 创建方式。其本质就是把在 XML 上的配置声明转移到 Java 配置类中</p><ul><li><strong>优点</strong>：适用于任何场景，配置方便，因为是纯 Java 代码，扩展性高，十分灵活</li><li><strong>缺点</strong>：由于是采用 Java 类的方式，声明不明显，如何大量配置，可读性比较差</li></ul><p><strong>举例</strong>：</p><ol><li>创建一个配置类，添加 @Configuration 注解声明为配置类</li><li>创建方法，方法上加上 @Bean，该方法用于创建实例并返回，该实例创建后会交给 Spring 管理，方法名建议与实例名相同（首字母小写）。注：实例类不需要加任何注解</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeansConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> user dao
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;userDao&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDaoImpl</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> user service
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span> <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserServiceImpl</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userService<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解配置" tabindex="-1"><a class="header-anchor" href="#注解配置" aria-hidden="true">#</a> 注解配置</h3><p>通过类上加注解的方式，来声明一个类交给 Spring 管理，Spring 会自动扫描带有 @Component ，@Controller，@Service，@Repository 这四个注解的类，然后帮我们创建并管理，前提是需要先配置 Spring 的注解扫描器。</p><ul><li><strong>优点</strong>：开发便捷，通俗易懂，方便维护。</li><li><strong>缺点</strong>：具有局限性，对于一些第三方资源，无法添加注解。只能采用 XML 或 JavaConfig 的方式配置</li></ul><p><strong>举例</strong>：</p><ol><li>对类添加 @Component 相关的注解，比如 @Controller，@Service，@Repository</li><li>设置 ComponentScan 的 basePackage， 比如 <code>&lt;context:component-scan base-package=&#39;tech.pdai.springframework&#39;&gt;</code>， 或者 <code>@ComponentScan(&quot;tech.pdai.springframework&quot;)</code> 注解，或者 <code>new AnnotationConfigApplicationContext(&quot;tech.pdai.springframework&quot;)</code> 指定扫描的 basePackage。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * user dao impl.
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * find user list.
     *
     * <span class="token keyword">@return</span> user list
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖注入的三种方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的三种方式" aria-hidden="true">#</a> 依赖注入的三种方式</h2><blockquote><p>常用的注入方式主要有三种：构造方法注入（Construct注入），setter注入，基于注解的注入（接口注入）</p></blockquote>`,55);function v(m,g){const s=c("ExternalLinkIcon");return o(),p("div",null,[r,a("p",null,[n("如果你有精力看英文，首推 Martin Fowler 大师的 "),a("a",u,[n("Inversion of Control Containers and the Dependency Injection pattern"),e(s)]),n("；其次IoC作为一种设计思想，不要过度解读，而是应该简化理解，所以我这里也整合了 张开涛早前的博客"),a("a",d,[n("IoC基础"),e(s)]),n("并加入了自己的理解。")]),k])}const f=t(l,[["render",v],["__file","spring-ioc.html.vue"]]);export{f as default};
