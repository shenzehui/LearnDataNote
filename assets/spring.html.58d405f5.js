import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e}from"./app.3d24f990.js";const t={},p=e(`<h2 id="spring-boot、spring-mvc-和-spring-有什么区别" tabindex="-1"><a class="header-anchor" href="#spring-boot、spring-mvc-和-spring-有什么区别" aria-hidden="true">#</a> Spring Boot、Spring MVC 和 Spring 有什么区别？</h2><p>Spring 是 IOC 容器，用来管理 Bean，使用依赖注入实现控制反转，可以很方便整合各种框架，提供 AOP 机制弥补 OOP 的代码重复问题、更方便将不同类不同方法中的共同处理抽取切面、自动注入给方法执行，比如日志、异常等</p><p>springmvc 是 spring 对 web 框架的一个解决方案，提供了一个总的前端控制器 Servlet，用来接收请求，然后定义了一套路由策略（url 到 handled 的映射）及适配执行 handle，将 handle 结果使用视图解析器技术生成视图展示给前端</p><p>springboot 是 spring 提供的一个快速开发工具包，让程序员更方便，更快速的开发 spring + springmvc 应用，简化了配置（约定了默认配置），整合了一系列解决方案（starter 机制）、redis、mongodb、es，可以开箱即用</p><h2 id="和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#和-的区别是什么" aria-hidden="true">#</a> #{} 和 \${} 的区别是什么？</h2><p>#{} 是预编译处理，是占位符，\${} 是字符串替换，是拼接符。</p><p>Mybatis 在处理 #{} 时，会将 sql 中的 #{} 替换为 ？号，调用 PreparedStatement 来赋值；</p><p>Mybatis 在处理 \${} 时，就是把 \${} 替换成变量的值，调用 Statement 来赋值；</p><p>#{} 的变量替换是在 DBMS 中、变量替换后，#{} 对应的变量自动加上单引号；</p><p>\${} 的变量替换是在 DBMS 外、变量替换后，\${} 对应的变量不会加上单引号；</p><p><strong>使用 #{} 可以有效的防止 SQL 注入，提高系统安全性。；</strong></p><h2 id="applicatoincontext-和-beanfactory-有什么区别" tabindex="-1"><a class="header-anchor" href="#applicatoincontext-和-beanfactory-有什么区别" aria-hidden="true">#</a> ApplicatoinContext 和 BeanFactory 有什么区别？</h2><p>BeanFactory 是 Spring 中非常核心的组件，表示 Bean 工厂，可以生成 Bean，维护 Bean，而 ApplicationContext 继承了 BeanFactory，所以 ApplictaionContext 拥有 BeanFactory 所有的特点，也是 Bean 工厂，但是 ApplicationContext 除了继承 BeanFactory 之外，还继承了诸如 Environment、MessageSource、ApplicationEventPublish 等接口，从而 ApplicationContxt 还有获取系统环境变量、国际化、事件发布等功能，这是 BeanFactory 所不具备的。</p><p>ApplictaionConetxt 提供了更完善的功能：</p><p>① 继承 MessageSource，因此支持国际化</p><p>② 统一的资源文件访问方式</p><p>③ 提供在监听器中注册 bean 的事件</p><p>④ 同时加载多个配置文件</p><p>⑤ 载入多个（有继承关系）上下文，使得每一个上下文都专注于特定的层次，比如应用 web 层。</p><ul><li><p>BeanFactory 采用的是<strong>延迟加载</strong>形式来注入 Bean 的，即只有在使用到某个 Bean 时（调用 getBea()），才对该 Bean 进行加载实例化。这样，我们就不能发现一些存在的 Spring 配置问题。如果 Bean 的某一个属性没有注入，BeanFactory 加载后，知道第一个使用调用 getBean() 方法才会抛出异常</p></li><li><p>ApplicationContext，它是在容器启动时，一次性创建了所有的 Bean。这样，在容器启动时，我们就可以发现 Spring 中存在的配置错误，这样有利于检查所依赖属性是和否注入。ApplicationContext 启动后预载入所有的单实例 Bean，通过预载入单实例 Bean，确保当前你需要的时候，你就不用等待，因为它们已经创建好了。</p></li><li><p>相对于基本的 BeanFactory，ApplicationContext 唯一的不足时占用内存空间。当应用的程序配置 Bean 较多时，程序启动较慢。</p></li><li><p>BeanFactory 通常以编程的方式被创建，ApplicationContext 还能以声明的方式创建，如使用 ConetxtLoader。</p></li><li><p>BeanFactory 和 ApplicationContext 都支持 BeanPostProcessor、BeanFactoryPostProcessor 的使用，但两者区别是：BeanFactory 需要手动注册，而 ApplicationContext 则是自动注册。</p></li></ul><h2 id="简述-mybatis-的插件运行原理-如何编写一个插件" tabindex="-1"><a class="header-anchor" href="#简述-mybatis-的插件运行原理-如何编写一个插件" aria-hidden="true">#</a> 简述 Mybatis 的插件运行原理，如何编写一个插件？</h2><p>答：Mybatis 只支持针对 ParameterHander（sql 中所需的参数数据类型转化）、ResultSetHandler（结果集）、StatementHandler（负责设置参数，结果集转换）、Executor（负责生成 sql 语句） 这 4 种接口的插件，Mybatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以及实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 InvacationHandler 的 invoke() 方法，拦截那些你指定需要拦截的方法。</p><ul><li>Executor：拦截内部执行器，它负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射，另外它还处理了二级缓存的操作；</li><li>StatementHandler：拦截 SQL 语法构建的处理，它是 MyBatis 直接和数据库执行 SQL 脚本的对象，另外它也实现了 MyBatis 的一级缓存；</li><li>ParameterHandler：拦截参数的处理；</li><li>ResultSetHandler：拦截结果集的处理。</li></ul><p>编写插件：实现 MyBatis 的 Interceptor 接口并复写 interceptor() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法，在配置文件中配置编写的插件。</p><p><strong>自定义插件实现示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span>
                        args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span> <span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

        <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被代理对象</span>

        <span class="token class-name">Method</span> method <span class="token operator">=</span> invocation<span class="token punctuation">.</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代理方法</span>

        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span> <span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法参数</span>

        <span class="token comment">// do something . . . . . .  方法拦截前执行代码块</span>

        <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// do something . . . . . . . 方法拦截后执行代码块</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mybatis-中存在哪些优点和缺点" tabindex="-1"><a class="header-anchor" href="#mybatis-中存在哪些优点和缺点" aria-hidden="true">#</a> MyBatis 中存在哪些优点和缺点</h2><p>优点：</p><ol><li>基于 SQL 语句编程，相对灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL 单独写，解除 sql 与程序代码的耦合，便于统一管理。</li><li>与 JDBC 相比，减少了 50% 以上的代码量，消除了 JDBC 大量冗余的代码，不需要手动开关连接；</li><li>很好的与各种数据库兼容（因为 MyBatis 使用了 JDBC 来连接数据库，所以只要 JDBC 支持数据库 MyBatis 都支持）。</li><li>能够与 Spring 很好的集成；</li><li>提供映射标签，支持对象与数据库的 ORM 字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</li></ol><p>缺点：</p><ol><li>SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写 SQL 语句的功底有第一要求。</li><li>SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</li></ol><h2 id="spring-mvc-的底层工作原理" tabindex="-1"><a class="header-anchor" href="#spring-mvc-的底层工作原理" aria-hidden="true">#</a> Spring MVC 的底层工作原理</h2><ol><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li><li>处理器映射器找到具体的处理器（可以根据 xml 配置、注解进行查找），生成处理器以及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li><li>DispatcherServlet 调用 HandlerAdapter 处理器适配器。</li><li>HandlerAdapter 经过适配器调用具体的处理器（Controller，也叫后端控制器）</li><li>Controller 执行完成后返回 ModelAndView。</li><li>HandlerAdapter 将 controller 执行结果 ModeAndView 返回给 DispatcherServlet。</li><li>DispatcherServlet 将 ModeAndView 传给 ViewResolver 视图解析器。</li><li>ViewResolver 解析后返回具体 View。</li><li>DispatcherServlet 根据 View 进行渲染视图（即将根据模型数据填充至视图中）。</li><li>DispatcherServlet 响应用户。</li></ol><h2 id="spring-boot-自动配置原理" tabindex="-1"><a class="header-anchor" href="#spring-boot-自动配置原理" aria-hidden="true">#</a> Spring Boot 自动配置原理</h2><p>@Import + @Configuration + Spring spi</p><p>自动 配置类由各个 starter 提供，使用 @Configuration + @Bean 定义配置类，放到 META-INF/spring.factories 下</p><p>使用 Spring spi 扫描 META-INF/spring.factories 下的配置类</p><p>使用 @Import 导入自动配置类</p><p><img src="https://cdn.jsdelivr.net/gh/itmarico/image-repository/img/image-20221113130132884.png" alt="image-20221113130132884" loading="lazy"></p><h2 id="spring-mvc-中的控制器是不是单例模式-如果是-如何保证线程安全" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中的控制器是不是单例模式-如果是-如何保证线程安全" aria-hidden="true">#</a> Spring MVC 中的控制器是不是单例模式？如果是，如何保证线程安全？</h2><p>控制器肯定是单例模式。</p><p>单例模式下就会有线程安全问题。</p><p>Spring 中保证线程安全的方法</p><ol><li>将 scope 设置成非 singleton。prototype，request。</li><li>最好的方式是将控制器设置成无状态模式。在控制器中，不要携带数据，但是可以引用无状态的 service 和 dao。</li></ol><h2 id="sping-框架中的单例-bean-是线程安全的么" tabindex="-1"><a class="header-anchor" href="#sping-框架中的单例-bean-是线程安全的么" aria-hidden="true">#</a> Sping 框架中的单例 Bean 是线程安全的么？</h2><p>Spring 中的 Bean 默认是单例模式的，框架并没有对 bean 进行多线程的封装处理。</p><p>如果 Bean 是有状态的，那就需要开发人员自己俩进行线程安全的保证，最简单的方法就是改变 bean 的作用域，把 &quot;singleton&quot; 改为 &quot;protopyte&quot;，这样每次请求 Bean 就相当于是 new Bean（）这样就可以保证线程安全了。</p><ul><li>有状态就是由数据存储功能</li><li>无状态就是不会保存数据 controller、service 和 dao 层本身并不是线程安全的，只是如果只是调用里面的方法，而且多线程调用一个实例的方法，会在内存中复制变量，这是自己的线程的内存工作，是安全的。</li></ul><p>Dao 会操作数据库 Connection，Connection 是带有状态的，比如说数据库事务，Spring 的事务管理器使用 Threadlocal 为不同线程维护了一条独立的 connection 副本，保证线程之间不会互相影响（Spring 是如何保证事务获取同一个 Connection 的）</p><p>不要在 bean 中声明任何有状态的实例变量或类变量，如果必须如此，那么就使用 ThreadLocal 把变量变为线程私有的，如果 bean 的实例变量或类变量需要在多个线程之间共享，那么就只能使用 synchronized、lock、CAS 等这些实现线程同步的方法了。</p><h2 id="spring-框架中都用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#spring-框架中都用到了哪些设计模式" aria-hidden="true">#</a> Spring 框架中都用到了哪些设计模式？</h2><p>简单工厂：由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。</p><blockquote><p>Spring 中的 BeanFactory 就是简单工程模式的体现，根据传入一个唯一的标识来获得 Bean 对象，但是否在传入参数后创建还是传入参数前创建这个要根据聚具体情况来定</p></blockquote><p>工厂方法：</p><blockquote><p>实现了 FactoryBean 接口的 bean 是一类叫做 factory 的 bean，其特点是：<strong>spring 会在使用 getBean()</strong> 调用获得该 bean 时，会自动调用该 <strong>bean 的 getObject()</strong> 方法，所以返回的不是 factory 这个 bean，而是这个 <strong>bean.getObject() 方法的返回值</strong>。</p></blockquote><p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><blockquote><p>spring 对单例的实现：spring 中的单例模式完成了后半句话，即提供了全局的访问点 BeanFactory。但没有从构造器级别去控制单例，这是因为 spring 管理的是任意的 java 对象。</p></blockquote><p>适配器模式：</p><blockquote><p>Spring 定义了一个适配器接口，使得每一种 Controller 有一种对应的适配器实现类，让适配器代替 controller 执行相应的方法，这样的扩展 Controller 时，只需要增加一个适配器类就完成了 SpringMVC 的扩展了。</p></blockquote><p>装饰器模式：动态地给一个对象添加一个额外的职责。就增加功能来说，Decorator 模式相比生成子类更为灵活。</p><blockquote><p>Spring 中用到的包装器模式在类名上有两种表现：一种是类名中含有 Wrapper，另一种是类名含有 Decorator</p></blockquote><p>动态代理：</p><blockquote><p>切面在应用运行的时候被织入，一般情况下，在织入切面时，AOP 容器会为目标对象创建一个代理对象。SpringAOP 就是以这种方式织入切面的。</p><p>织入：把切面应用到目标对象并创建新的代理对象的过程。</p></blockquote><p>观察者模式：</p><blockquote><p>spring 的事件驱动模型使用的是观察者模式，Spring 中 Observer 模式常用的地方是 listener 的实现。</p></blockquote><p>策略者模式：</p><blockquote><p>Spring 框架的资源访问 Resource 接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。</p></blockquote>`,67),o=[p];function i(l,c){return a(),s("div",null,o)}const d=n(t,[["render",i],["__file","spring.html.vue"]]);export{d as default};
